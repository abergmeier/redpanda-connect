// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AppRoleDeleteBindSecretID implements app-role-delete-bind-secret-id operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/bind-secret-id
	AppRoleDeleteBindSecretID(ctx context.Context, params AppRoleDeleteBindSecretIDParams) error
	// AppRoleDeleteBoundCidrList implements app-role-delete-bound-cidr-list operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/bound-cidr-list
	AppRoleDeleteBoundCidrList(ctx context.Context, params AppRoleDeleteBoundCidrListParams) error
	// AppRoleDeletePeriod implements app-role-delete-period operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/period
	AppRoleDeletePeriod(ctx context.Context, params AppRoleDeletePeriodParams) error
	// AppRoleDeletePolicies implements app-role-delete-policies operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/policies
	AppRoleDeletePolicies(ctx context.Context, params AppRoleDeletePoliciesParams) error
	// AppRoleDeleteRole implements app-role-delete-role operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}
	AppRoleDeleteRole(ctx context.Context, params AppRoleDeleteRoleParams) error
	// AppRoleDeleteSecretIDBoundCidrs implements app-role-delete-secret-id-bound-cidrs operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs
	AppRoleDeleteSecretIDBoundCidrs(ctx context.Context, params AppRoleDeleteSecretIDBoundCidrsParams) error
	// AppRoleDeleteSecretIDNumUses implements app-role-delete-secret-id-num-uses operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses
	AppRoleDeleteSecretIDNumUses(ctx context.Context, params AppRoleDeleteSecretIDNumUsesParams) error
	// AppRoleDeleteSecretIDTTL implements app-role-delete-secret-id-ttl operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/secret-id-ttl
	AppRoleDeleteSecretIDTTL(ctx context.Context, params AppRoleDeleteSecretIDTTLParams) error
	// AppRoleDeleteTokenBoundCidrs implements app-role-delete-token-bound-cidrs operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs
	AppRoleDeleteTokenBoundCidrs(ctx context.Context, params AppRoleDeleteTokenBoundCidrsParams) error
	// AppRoleDeleteTokenMaxTTL implements app-role-delete-token-max-ttl operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/token-max-ttl
	AppRoleDeleteTokenMaxTTL(ctx context.Context, params AppRoleDeleteTokenMaxTTLParams) error
	// AppRoleDeleteTokenNumUses implements app-role-delete-token-num-uses operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/token-num-uses
	AppRoleDeleteTokenNumUses(ctx context.Context, params AppRoleDeleteTokenNumUsesParams) error
	// AppRoleDeleteTokenTTL implements app-role-delete-token-ttl operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/token-ttl
	AppRoleDeleteTokenTTL(ctx context.Context, params AppRoleDeleteTokenTTLParams) error
	// AppRoleDestroySecretID implements app-role-destroy-secret-id operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/secret-id/destroy
	AppRoleDestroySecretID(ctx context.Context, req *AppRoleDestroySecretIdRequest, params AppRoleDestroySecretIDParams) error
	// AppRoleDestroySecretIDByAccessor implements app-role-destroy-secret-id-by-accessor operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/destroy
	AppRoleDestroySecretIDByAccessor(ctx context.Context, req *AppRoleDestroySecretIdByAccessorRequest, params AppRoleDestroySecretIDByAccessorParams) error
	// AppRoleDestroySecretIDByAccessor2 implements app-role-destroy-secret-id-by-accessor2 operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/destroy
	AppRoleDestroySecretIDByAccessor2(ctx context.Context, params AppRoleDestroySecretIDByAccessor2Params) error
	// AppRoleDestroySecretId2 implements app-role-destroy-secret-id2 operation.
	//
	// DELETE /auth/{approle_mount_path}/role/{role_name}/secret-id/destroy
	AppRoleDestroySecretId2(ctx context.Context, params AppRoleDestroySecretId2Params) error
	// AppRoleListRoles implements app-role-list-roles operation.
	//
	// GET /auth/{approle_mount_path}/role/
	AppRoleListRoles(ctx context.Context, params AppRoleListRolesParams) (*StandardListResponse, error)
	// AppRoleListSecretIds implements app-role-list-secret-ids operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/secret-id/
	AppRoleListSecretIds(ctx context.Context, params AppRoleListSecretIdsParams) (*StandardListResponse, error)
	// AppRoleLogin implements app-role-login operation.
	//
	// POST /auth/{approle_mount_path}/login
	AppRoleLogin(ctx context.Context, req *AppRoleLoginRequest, params AppRoleLoginParams) error
	// AppRoleLookUpSecretID implements app-role-look-up-secret-id operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/secret-id/lookup
	AppRoleLookUpSecretID(ctx context.Context, req *AppRoleLookUpSecretIdRequest, params AppRoleLookUpSecretIDParams) (*AppRoleLookUpSecretIdResponse, error)
	// AppRoleLookUpSecretIDByAccessor implements app-role-look-up-secret-id-by-accessor operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/lookup
	AppRoleLookUpSecretIDByAccessor(ctx context.Context, req *AppRoleLookUpSecretIdByAccessorRequest, params AppRoleLookUpSecretIDByAccessorParams) (*AppRoleLookUpSecretIdByAccessorResponse, error)
	// AppRoleReadBindSecretID implements app-role-read-bind-secret-id operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/bind-secret-id
	AppRoleReadBindSecretID(ctx context.Context, params AppRoleReadBindSecretIDParams) (*AppRoleReadBindSecretIdResponse, error)
	// AppRoleReadBoundCidrList implements app-role-read-bound-cidr-list operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/bound-cidr-list
	AppRoleReadBoundCidrList(ctx context.Context, params AppRoleReadBoundCidrListParams) (*AppRoleReadBoundCidrListResponse, error)
	// AppRoleReadLocalSecretIds implements app-role-read-local-secret-ids operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/local-secret-ids
	AppRoleReadLocalSecretIds(ctx context.Context, params AppRoleReadLocalSecretIdsParams) (*AppRoleReadLocalSecretIdsResponse, error)
	// AppRoleReadPeriod implements app-role-read-period operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/period
	AppRoleReadPeriod(ctx context.Context, params AppRoleReadPeriodParams) (*AppRoleReadPeriodResponse, error)
	// AppRoleReadPolicies implements app-role-read-policies operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/policies
	AppRoleReadPolicies(ctx context.Context, params AppRoleReadPoliciesParams) (*AppRoleReadPoliciesResponse, error)
	// AppRoleReadRole implements app-role-read-role operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}
	AppRoleReadRole(ctx context.Context, params AppRoleReadRoleParams) (*AppRoleReadRoleResponse, error)
	// AppRoleReadRoleID implements app-role-read-role-id operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/role-id
	AppRoleReadRoleID(ctx context.Context, params AppRoleReadRoleIDParams) (*AppRoleReadRoleIdResponse, error)
	// AppRoleReadSecretIDBoundCidrs implements app-role-read-secret-id-bound-cidrs operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs
	AppRoleReadSecretIDBoundCidrs(ctx context.Context, params AppRoleReadSecretIDBoundCidrsParams) (*AppRoleReadSecretIdBoundCidrsResponse, error)
	// AppRoleReadSecretIDNumUses implements app-role-read-secret-id-num-uses operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses
	AppRoleReadSecretIDNumUses(ctx context.Context, params AppRoleReadSecretIDNumUsesParams) (*AppRoleReadSecretIdNumUsesResponse, error)
	// AppRoleReadSecretIDTTL implements app-role-read-secret-id-ttl operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/secret-id-ttl
	AppRoleReadSecretIDTTL(ctx context.Context, params AppRoleReadSecretIDTTLParams) (*AppRoleReadSecretIdTtlResponse, error)
	// AppRoleReadTokenBoundCidrs implements app-role-read-token-bound-cidrs operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs
	AppRoleReadTokenBoundCidrs(ctx context.Context, params AppRoleReadTokenBoundCidrsParams) (*AppRoleReadTokenBoundCidrsResponse, error)
	// AppRoleReadTokenMaxTTL implements app-role-read-token-max-ttl operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/token-max-ttl
	AppRoleReadTokenMaxTTL(ctx context.Context, params AppRoleReadTokenMaxTTLParams) (*AppRoleReadTokenMaxTtlResponse, error)
	// AppRoleReadTokenNumUses implements app-role-read-token-num-uses operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/token-num-uses
	AppRoleReadTokenNumUses(ctx context.Context, params AppRoleReadTokenNumUsesParams) (*AppRoleReadTokenNumUsesResponse, error)
	// AppRoleReadTokenTTL implements app-role-read-token-ttl operation.
	//
	// GET /auth/{approle_mount_path}/role/{role_name}/token-ttl
	AppRoleReadTokenTTL(ctx context.Context, params AppRoleReadTokenTTLParams) (*AppRoleReadTokenTtlResponse, error)
	// AppRoleTidySecretID implements app-role-tidy-secret-id operation.
	//
	// POST /auth/{approle_mount_path}/tidy/secret-id
	AppRoleTidySecretID(ctx context.Context, params AppRoleTidySecretIDParams) error
	// AppRoleWriteBindSecretID implements app-role-write-bind-secret-id operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/bind-secret-id
	AppRoleWriteBindSecretID(ctx context.Context, req *AppRoleWriteBindSecretIdRequest, params AppRoleWriteBindSecretIDParams) error
	// AppRoleWriteBoundCidrList implements app-role-write-bound-cidr-list operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/bound-cidr-list
	AppRoleWriteBoundCidrList(ctx context.Context, req *AppRoleWriteBoundCidrListRequest, params AppRoleWriteBoundCidrListParams) error
	// AppRoleWriteCustomSecretID implements app-role-write-custom-secret-id operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/custom-secret-id
	AppRoleWriteCustomSecretID(ctx context.Context, req *AppRoleWriteCustomSecretIdRequest, params AppRoleWriteCustomSecretIDParams) (*AppRoleWriteCustomSecretIdResponse, error)
	// AppRoleWritePeriod implements app-role-write-period operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/period
	AppRoleWritePeriod(ctx context.Context, req *AppRoleWritePeriodRequest, params AppRoleWritePeriodParams) error
	// AppRoleWritePolicies implements app-role-write-policies operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/policies
	AppRoleWritePolicies(ctx context.Context, req *AppRoleWritePoliciesRequest, params AppRoleWritePoliciesParams) error
	// AppRoleWriteRole implements app-role-write-role operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}
	AppRoleWriteRole(ctx context.Context, req *AppRoleWriteRoleRequest, params AppRoleWriteRoleParams) error
	// AppRoleWriteRoleID implements app-role-write-role-id operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/role-id
	AppRoleWriteRoleID(ctx context.Context, req *AppRoleWriteRoleIdRequest, params AppRoleWriteRoleIDParams) error
	// AppRoleWriteSecretID implements app-role-write-secret-id operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/secret-id
	AppRoleWriteSecretID(ctx context.Context, req *AppRoleWriteSecretIdRequest, params AppRoleWriteSecretIDParams) (*AppRoleWriteSecretIdResponse, error)
	// AppRoleWriteSecretIDBoundCidrs implements app-role-write-secret-id-bound-cidrs operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs
	AppRoleWriteSecretIDBoundCidrs(ctx context.Context, req *AppRoleWriteSecretIdBoundCidrsRequest, params AppRoleWriteSecretIDBoundCidrsParams) error
	// AppRoleWriteSecretIDNumUses implements app-role-write-secret-id-num-uses operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses
	AppRoleWriteSecretIDNumUses(ctx context.Context, req *AppRoleWriteSecretIdNumUsesRequest, params AppRoleWriteSecretIDNumUsesParams) error
	// AppRoleWriteSecretIDTTL implements app-role-write-secret-id-ttl operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/secret-id-ttl
	AppRoleWriteSecretIDTTL(ctx context.Context, req *AppRoleWriteSecretIdTtlRequest, params AppRoleWriteSecretIDTTLParams) error
	// AppRoleWriteTokenBoundCidrs implements app-role-write-token-bound-cidrs operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs
	AppRoleWriteTokenBoundCidrs(ctx context.Context, req *AppRoleWriteTokenBoundCidrsRequest, params AppRoleWriteTokenBoundCidrsParams) error
	// AppRoleWriteTokenMaxTTL implements app-role-write-token-max-ttl operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/token-max-ttl
	AppRoleWriteTokenMaxTTL(ctx context.Context, req *AppRoleWriteTokenMaxTtlRequest, params AppRoleWriteTokenMaxTTLParams) error
	// AppRoleWriteTokenNumUses implements app-role-write-token-num-uses operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/token-num-uses
	AppRoleWriteTokenNumUses(ctx context.Context, req *AppRoleWriteTokenNumUsesRequest, params AppRoleWriteTokenNumUsesParams) error
	// AppRoleWriteTokenTTL implements app-role-write-token-ttl operation.
	//
	// POST /auth/{approle_mount_path}/role/{role_name}/token-ttl
	AppRoleWriteTokenTTL(ctx context.Context, req *AppRoleWriteTokenTtlRequest, params AppRoleWriteTokenTTLParams) error
	// KvV2Configure implements kv-v2-configure operation.
	//
	// Configure backend level settings that are applied to every key in the key-value store.
	//
	// POST /{kv_v2_mount_path}/config
	KvV2Configure(ctx context.Context, req *KvV2ConfigureRequest, params KvV2ConfigureParams) error
	// KvV2Delete implements kv-v2-delete operation.
	//
	// DELETE /{kv_v2_mount_path}/data/{path}
	KvV2Delete(ctx context.Context, params KvV2DeleteParams) error
	// KvV2DeleteMetadataAndAllVersions implements kv-v2-delete-metadata-and-all-versions operation.
	//
	// DELETE /{kv_v2_mount_path}/metadata/{path}
	KvV2DeleteMetadataAndAllVersions(ctx context.Context, params KvV2DeleteMetadataAndAllVersionsParams) error
	// KvV2DeleteVersions implements kv-v2-delete-versions operation.
	//
	// POST /{kv_v2_mount_path}/delete/{path}
	KvV2DeleteVersions(ctx context.Context, req *KvV2DeleteVersionsRequest, params KvV2DeleteVersionsParams) error
	// KvV2DestroyVersions implements kv-v2-destroy-versions operation.
	//
	// POST /{kv_v2_mount_path}/destroy/{path}
	KvV2DestroyVersions(ctx context.Context, req *KvV2DestroyVersionsRequest, params KvV2DestroyVersionsParams) error
	// KvV2List implements kv-v2-list operation.
	//
	// GET /{kv_v2_mount_path}/metadata/{path}/
	KvV2List(ctx context.Context, params KvV2ListParams) (*StandardListResponse, error)
	// KvV2Read implements kv-v2-read operation.
	//
	// GET /{kv_v2_mount_path}/data/{path}
	KvV2Read(ctx context.Context, params KvV2ReadParams) (*KvV2ReadResponse, error)
	// KvV2ReadConfiguration implements kv-v2-read-configuration operation.
	//
	// Read the backend level settings.
	//
	// GET /{kv_v2_mount_path}/config
	KvV2ReadConfiguration(ctx context.Context, params KvV2ReadConfigurationParams) (*KvV2ReadConfigurationResponse, error)
	// KvV2ReadMetadata implements kv-v2-read-metadata operation.
	//
	// GET /{kv_v2_mount_path}/metadata/{path}
	KvV2ReadMetadata(ctx context.Context, params KvV2ReadMetadataParams) (*KvV2ReadMetadataResponse, error)
	// KvV2ReadSubkeys implements kv-v2-read-subkeys operation.
	//
	// GET /{kv_v2_mount_path}/subkeys/{path}
	KvV2ReadSubkeys(ctx context.Context, params KvV2ReadSubkeysParams) (*KvV2ReadSubkeysResponse, error)
	// KvV2UndeleteVersions implements kv-v2-undelete-versions operation.
	//
	// POST /{kv_v2_mount_path}/undelete/{path}
	KvV2UndeleteVersions(ctx context.Context, req *KvV2UndeleteVersionsRequest, params KvV2UndeleteVersionsParams) error
	// KvV2Write implements kv-v2-write operation.
	//
	// POST /{kv_v2_mount_path}/data/{path}
	KvV2Write(ctx context.Context, req *KvV2WriteRequest, params KvV2WriteParams) (*KvV2WriteResponse, error)
	// KvV2WriteMetadata implements kv-v2-write-metadata operation.
	//
	// POST /{kv_v2_mount_path}/metadata/{path}
	KvV2WriteMetadata(ctx context.Context, req *KvV2WriteMetadataRequest, params KvV2WriteMetadataParams) error
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
