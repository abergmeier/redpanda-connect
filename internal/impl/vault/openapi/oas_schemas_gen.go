// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// AppRoleDeleteBindSecretIDNoContent is response for AppRoleDeleteBindSecretID operation.
type AppRoleDeleteBindSecretIDNoContent struct{}

// AppRoleDeleteBoundCidrListNoContent is response for AppRoleDeleteBoundCidrList operation.
type AppRoleDeleteBoundCidrListNoContent struct{}

// AppRoleDeletePeriodNoContent is response for AppRoleDeletePeriod operation.
type AppRoleDeletePeriodNoContent struct{}

// AppRoleDeletePoliciesNoContent is response for AppRoleDeletePolicies operation.
type AppRoleDeletePoliciesNoContent struct{}

// AppRoleDeleteRoleNoContent is response for AppRoleDeleteRole operation.
type AppRoleDeleteRoleNoContent struct{}

// AppRoleDeleteSecretIDBoundCidrsNoContent is response for AppRoleDeleteSecretIDBoundCidrs operation.
type AppRoleDeleteSecretIDBoundCidrsNoContent struct{}

// AppRoleDeleteSecretIDNumUsesNoContent is response for AppRoleDeleteSecretIDNumUses operation.
type AppRoleDeleteSecretIDNumUsesNoContent struct{}

// AppRoleDeleteSecretIDTTLNoContent is response for AppRoleDeleteSecretIDTTL operation.
type AppRoleDeleteSecretIDTTLNoContent struct{}

// AppRoleDeleteTokenBoundCidrsNoContent is response for AppRoleDeleteTokenBoundCidrs operation.
type AppRoleDeleteTokenBoundCidrsNoContent struct{}

// AppRoleDeleteTokenMaxTTLNoContent is response for AppRoleDeleteTokenMaxTTL operation.
type AppRoleDeleteTokenMaxTTLNoContent struct{}

// AppRoleDeleteTokenNumUsesNoContent is response for AppRoleDeleteTokenNumUses operation.
type AppRoleDeleteTokenNumUsesNoContent struct{}

// AppRoleDeleteTokenTTLNoContent is response for AppRoleDeleteTokenTTL operation.
type AppRoleDeleteTokenTTLNoContent struct{}

// AppRoleDestroySecretIDByAccessor2NoContent is response for AppRoleDestroySecretIDByAccessor2 operation.
type AppRoleDestroySecretIDByAccessor2NoContent struct{}

// AppRoleDestroySecretIDByAccessorNoContent is response for AppRoleDestroySecretIDByAccessor operation.
type AppRoleDestroySecretIDByAccessorNoContent struct{}

// AppRoleDestroySecretIDNoContent is response for AppRoleDestroySecretID operation.
type AppRoleDestroySecretIDNoContent struct{}

// AppRoleDestroySecretId2NoContent is response for AppRoleDestroySecretId2 operation.
type AppRoleDestroySecretId2NoContent struct{}

// Ref: #/components/schemas/AppRoleDestroySecretIdByAccessorRequest
type AppRoleDestroySecretIdByAccessorRequest struct {
	// Accessor of the SecretID.
	SecretIDAccessor OptString `json:"secret_id_accessor"`
}

// GetSecretIDAccessor returns the value of SecretIDAccessor.
func (s *AppRoleDestroySecretIdByAccessorRequest) GetSecretIDAccessor() OptString {
	return s.SecretIDAccessor
}

// SetSecretIDAccessor sets the value of SecretIDAccessor.
func (s *AppRoleDestroySecretIdByAccessorRequest) SetSecretIDAccessor(val OptString) {
	s.SecretIDAccessor = val
}

// Ref: #/components/schemas/AppRoleDestroySecretIdRequest
type AppRoleDestroySecretIdRequest struct {
	// SecretID attached to the role.
	SecretID OptString `json:"secret_id"`
}

// GetSecretID returns the value of SecretID.
func (s *AppRoleDestroySecretIdRequest) GetSecretID() OptString {
	return s.SecretID
}

// SetSecretID sets the value of SecretID.
func (s *AppRoleDestroySecretIdRequest) SetSecretID(val OptString) {
	s.SecretID = val
}

type AppRoleListRolesList string

const (
	AppRoleListRolesListTrue AppRoleListRolesList = "true"
)

// AllValues returns all AppRoleListRolesList values.
func (AppRoleListRolesList) AllValues() []AppRoleListRolesList {
	return []AppRoleListRolesList{
		AppRoleListRolesListTrue,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppRoleListRolesList) MarshalText() ([]byte, error) {
	switch s {
	case AppRoleListRolesListTrue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppRoleListRolesList) UnmarshalText(data []byte) error {
	switch AppRoleListRolesList(data) {
	case AppRoleListRolesListTrue:
		*s = AppRoleListRolesListTrue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AppRoleListSecretIdsList string

const (
	AppRoleListSecretIdsListTrue AppRoleListSecretIdsList = "true"
)

// AllValues returns all AppRoleListSecretIdsList values.
func (AppRoleListSecretIdsList) AllValues() []AppRoleListSecretIdsList {
	return []AppRoleListSecretIdsList{
		AppRoleListSecretIdsListTrue,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppRoleListSecretIdsList) MarshalText() ([]byte, error) {
	switch s {
	case AppRoleListSecretIdsListTrue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppRoleListSecretIdsList) UnmarshalText(data []byte) error {
	switch AppRoleListSecretIdsList(data) {
	case AppRoleListSecretIdsListTrue:
		*s = AppRoleListSecretIdsListTrue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// AppRoleLoginOK is response for AppRoleLogin operation.
type AppRoleLoginOK struct{}

// Ref: #/components/schemas/AppRoleLoginRequest
type AppRoleLoginRequest struct {
	// Unique identifier of the Role. Required to be supplied when the 'bind_secret_id' constraint is set.
	RoleID OptString `json:"role_id"`
	// SecretID belong to the App role.
	SecretID OptString `json:"secret_id"`
}

// GetRoleID returns the value of RoleID.
func (s *AppRoleLoginRequest) GetRoleID() OptString {
	return s.RoleID
}

// GetSecretID returns the value of SecretID.
func (s *AppRoleLoginRequest) GetSecretID() OptString {
	return s.SecretID
}

// SetRoleID sets the value of RoleID.
func (s *AppRoleLoginRequest) SetRoleID(val OptString) {
	s.RoleID = val
}

// SetSecretID sets the value of SecretID.
func (s *AppRoleLoginRequest) SetSecretID(val OptString) {
	s.SecretID = val
}

// Ref: #/components/schemas/AppRoleLookUpSecretIdByAccessorRequest
type AppRoleLookUpSecretIdByAccessorRequest struct {
	// Accessor of the SecretID.
	SecretIDAccessor OptString `json:"secret_id_accessor"`
}

// GetSecretIDAccessor returns the value of SecretIDAccessor.
func (s *AppRoleLookUpSecretIdByAccessorRequest) GetSecretIDAccessor() OptString {
	return s.SecretIDAccessor
}

// SetSecretIDAccessor sets the value of SecretIDAccessor.
func (s *AppRoleLookUpSecretIdByAccessorRequest) SetSecretIDAccessor(val OptString) {
	s.SecretIDAccessor = val
}

// Ref: #/components/schemas/AppRoleLookUpSecretIdByAccessorResponse
type AppRoleLookUpSecretIdByAccessorResponse struct {
	// List of CIDR blocks enforcing secret IDs to be used from specific set of IP addresses. If
	// 'bound_cidr_list' is set on the role, then the list of CIDR blocks listed here should be a subset
	// of the CIDR blocks listed on the role.
	CidrList        []string                                           `json:"cidr_list"`
	CreationTime    OptDateTime                                        `json:"creation_time"`
	ExpirationTime  OptDateTime                                        `json:"expiration_time"`
	LastUpdatedTime OptDateTime                                        `json:"last_updated_time"`
	Metadata        OptAppRoleLookUpSecretIdByAccessorResponseMetadata `json:"metadata"`
	// Accessor of the secret ID.
	SecretIDAccessor OptString `json:"secret_id_accessor"`
	// Number of times a secret ID can access the role, after which the secret ID will expire.
	SecretIDNumUses OptInt `json:"secret_id_num_uses"`
	// Duration in seconds after which the issued secret ID expires.
	SecretIDTTL OptDuration `json:"secret_id_ttl"`
	// List of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
	//  Should be a subset of the token CIDR blocks listed on the role, if any.
	TokenBoundCidrs []string `json:"token_bound_cidrs"`
}

// GetCidrList returns the value of CidrList.
func (s *AppRoleLookUpSecretIdByAccessorResponse) GetCidrList() []string {
	return s.CidrList
}

// GetCreationTime returns the value of CreationTime.
func (s *AppRoleLookUpSecretIdByAccessorResponse) GetCreationTime() OptDateTime {
	return s.CreationTime
}

// GetExpirationTime returns the value of ExpirationTime.
func (s *AppRoleLookUpSecretIdByAccessorResponse) GetExpirationTime() OptDateTime {
	return s.ExpirationTime
}

// GetLastUpdatedTime returns the value of LastUpdatedTime.
func (s *AppRoleLookUpSecretIdByAccessorResponse) GetLastUpdatedTime() OptDateTime {
	return s.LastUpdatedTime
}

// GetMetadata returns the value of Metadata.
func (s *AppRoleLookUpSecretIdByAccessorResponse) GetMetadata() OptAppRoleLookUpSecretIdByAccessorResponseMetadata {
	return s.Metadata
}

// GetSecretIDAccessor returns the value of SecretIDAccessor.
func (s *AppRoleLookUpSecretIdByAccessorResponse) GetSecretIDAccessor() OptString {
	return s.SecretIDAccessor
}

// GetSecretIDNumUses returns the value of SecretIDNumUses.
func (s *AppRoleLookUpSecretIdByAccessorResponse) GetSecretIDNumUses() OptInt {
	return s.SecretIDNumUses
}

// GetSecretIDTTL returns the value of SecretIDTTL.
func (s *AppRoleLookUpSecretIdByAccessorResponse) GetSecretIDTTL() OptDuration {
	return s.SecretIDTTL
}

// GetTokenBoundCidrs returns the value of TokenBoundCidrs.
func (s *AppRoleLookUpSecretIdByAccessorResponse) GetTokenBoundCidrs() []string {
	return s.TokenBoundCidrs
}

// SetCidrList sets the value of CidrList.
func (s *AppRoleLookUpSecretIdByAccessorResponse) SetCidrList(val []string) {
	s.CidrList = val
}

// SetCreationTime sets the value of CreationTime.
func (s *AppRoleLookUpSecretIdByAccessorResponse) SetCreationTime(val OptDateTime) {
	s.CreationTime = val
}

// SetExpirationTime sets the value of ExpirationTime.
func (s *AppRoleLookUpSecretIdByAccessorResponse) SetExpirationTime(val OptDateTime) {
	s.ExpirationTime = val
}

// SetLastUpdatedTime sets the value of LastUpdatedTime.
func (s *AppRoleLookUpSecretIdByAccessorResponse) SetLastUpdatedTime(val OptDateTime) {
	s.LastUpdatedTime = val
}

// SetMetadata sets the value of Metadata.
func (s *AppRoleLookUpSecretIdByAccessorResponse) SetMetadata(val OptAppRoleLookUpSecretIdByAccessorResponseMetadata) {
	s.Metadata = val
}

// SetSecretIDAccessor sets the value of SecretIDAccessor.
func (s *AppRoleLookUpSecretIdByAccessorResponse) SetSecretIDAccessor(val OptString) {
	s.SecretIDAccessor = val
}

// SetSecretIDNumUses sets the value of SecretIDNumUses.
func (s *AppRoleLookUpSecretIdByAccessorResponse) SetSecretIDNumUses(val OptInt) {
	s.SecretIDNumUses = val
}

// SetSecretIDTTL sets the value of SecretIDTTL.
func (s *AppRoleLookUpSecretIdByAccessorResponse) SetSecretIDTTL(val OptDuration) {
	s.SecretIDTTL = val
}

// SetTokenBoundCidrs sets the value of TokenBoundCidrs.
func (s *AppRoleLookUpSecretIdByAccessorResponse) SetTokenBoundCidrs(val []string) {
	s.TokenBoundCidrs = val
}

type AppRoleLookUpSecretIdByAccessorResponseMetadata map[string]jx.Raw

func (s *AppRoleLookUpSecretIdByAccessorResponseMetadata) init() AppRoleLookUpSecretIdByAccessorResponseMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/AppRoleLookUpSecretIdRequest
type AppRoleLookUpSecretIdRequest struct {
	// SecretID attached to the role.
	SecretID OptString `json:"secret_id"`
}

// GetSecretID returns the value of SecretID.
func (s *AppRoleLookUpSecretIdRequest) GetSecretID() OptString {
	return s.SecretID
}

// SetSecretID sets the value of SecretID.
func (s *AppRoleLookUpSecretIdRequest) SetSecretID(val OptString) {
	s.SecretID = val
}

// Ref: #/components/schemas/AppRoleLookUpSecretIdResponse
type AppRoleLookUpSecretIdResponse struct {
	// List of CIDR blocks enforcing secret IDs to be used from specific set of IP addresses. If
	// 'bound_cidr_list' is set on the role, then the list of CIDR blocks listed here should be a subset
	// of the CIDR blocks listed on the role.
	CidrList        []string                                 `json:"cidr_list"`
	CreationTime    OptDateTime                              `json:"creation_time"`
	ExpirationTime  OptDateTime                              `json:"expiration_time"`
	LastUpdatedTime OptDateTime                              `json:"last_updated_time"`
	Metadata        OptAppRoleLookUpSecretIdResponseMetadata `json:"metadata"`
	// Accessor of the secret ID.
	SecretIDAccessor OptString `json:"secret_id_accessor"`
	// Number of times a secret ID can access the role, after which the secret ID will expire.
	SecretIDNumUses OptInt `json:"secret_id_num_uses"`
	// Duration in seconds after which the issued secret ID expires.
	SecretIDTTL OptDuration `json:"secret_id_ttl"`
	// List of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
	//  Should be a subset of the token CIDR blocks listed on the role, if any.
	TokenBoundCidrs []string `json:"token_bound_cidrs"`
}

// GetCidrList returns the value of CidrList.
func (s *AppRoleLookUpSecretIdResponse) GetCidrList() []string {
	return s.CidrList
}

// GetCreationTime returns the value of CreationTime.
func (s *AppRoleLookUpSecretIdResponse) GetCreationTime() OptDateTime {
	return s.CreationTime
}

// GetExpirationTime returns the value of ExpirationTime.
func (s *AppRoleLookUpSecretIdResponse) GetExpirationTime() OptDateTime {
	return s.ExpirationTime
}

// GetLastUpdatedTime returns the value of LastUpdatedTime.
func (s *AppRoleLookUpSecretIdResponse) GetLastUpdatedTime() OptDateTime {
	return s.LastUpdatedTime
}

// GetMetadata returns the value of Metadata.
func (s *AppRoleLookUpSecretIdResponse) GetMetadata() OptAppRoleLookUpSecretIdResponseMetadata {
	return s.Metadata
}

// GetSecretIDAccessor returns the value of SecretIDAccessor.
func (s *AppRoleLookUpSecretIdResponse) GetSecretIDAccessor() OptString {
	return s.SecretIDAccessor
}

// GetSecretIDNumUses returns the value of SecretIDNumUses.
func (s *AppRoleLookUpSecretIdResponse) GetSecretIDNumUses() OptInt {
	return s.SecretIDNumUses
}

// GetSecretIDTTL returns the value of SecretIDTTL.
func (s *AppRoleLookUpSecretIdResponse) GetSecretIDTTL() OptDuration {
	return s.SecretIDTTL
}

// GetTokenBoundCidrs returns the value of TokenBoundCidrs.
func (s *AppRoleLookUpSecretIdResponse) GetTokenBoundCidrs() []string {
	return s.TokenBoundCidrs
}

// SetCidrList sets the value of CidrList.
func (s *AppRoleLookUpSecretIdResponse) SetCidrList(val []string) {
	s.CidrList = val
}

// SetCreationTime sets the value of CreationTime.
func (s *AppRoleLookUpSecretIdResponse) SetCreationTime(val OptDateTime) {
	s.CreationTime = val
}

// SetExpirationTime sets the value of ExpirationTime.
func (s *AppRoleLookUpSecretIdResponse) SetExpirationTime(val OptDateTime) {
	s.ExpirationTime = val
}

// SetLastUpdatedTime sets the value of LastUpdatedTime.
func (s *AppRoleLookUpSecretIdResponse) SetLastUpdatedTime(val OptDateTime) {
	s.LastUpdatedTime = val
}

// SetMetadata sets the value of Metadata.
func (s *AppRoleLookUpSecretIdResponse) SetMetadata(val OptAppRoleLookUpSecretIdResponseMetadata) {
	s.Metadata = val
}

// SetSecretIDAccessor sets the value of SecretIDAccessor.
func (s *AppRoleLookUpSecretIdResponse) SetSecretIDAccessor(val OptString) {
	s.SecretIDAccessor = val
}

// SetSecretIDNumUses sets the value of SecretIDNumUses.
func (s *AppRoleLookUpSecretIdResponse) SetSecretIDNumUses(val OptInt) {
	s.SecretIDNumUses = val
}

// SetSecretIDTTL sets the value of SecretIDTTL.
func (s *AppRoleLookUpSecretIdResponse) SetSecretIDTTL(val OptDuration) {
	s.SecretIDTTL = val
}

// SetTokenBoundCidrs sets the value of TokenBoundCidrs.
func (s *AppRoleLookUpSecretIdResponse) SetTokenBoundCidrs(val []string) {
	s.TokenBoundCidrs = val
}

type AppRoleLookUpSecretIdResponseMetadata map[string]jx.Raw

func (s *AppRoleLookUpSecretIdResponseMetadata) init() AppRoleLookUpSecretIdResponseMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/AppRoleReadBindSecretIdResponse
type AppRoleReadBindSecretIdResponse struct {
	// Impose secret_id to be presented when logging in using this role. Defaults to 'true'.
	BindSecretID OptBool `json:"bind_secret_id"`
}

// GetBindSecretID returns the value of BindSecretID.
func (s *AppRoleReadBindSecretIdResponse) GetBindSecretID() OptBool {
	return s.BindSecretID
}

// SetBindSecretID sets the value of BindSecretID.
func (s *AppRoleReadBindSecretIdResponse) SetBindSecretID(val OptBool) {
	s.BindSecretID = val
}

// Ref: #/components/schemas/AppRoleReadBoundCidrListResponse
type AppRoleReadBoundCidrListResponse struct {
	// Deprecated: Please use "secret_id_bound_cidrs" instead. Comma separated string or list of CIDR
	// blocks. If set, specifies the blocks of IP addresses which can perform the login operation.
	//
	// Deprecated: schema marks this property as deprecated.
	BoundCidrList []string `json:"bound_cidr_list"`
}

// GetBoundCidrList returns the value of BoundCidrList.
func (s *AppRoleReadBoundCidrListResponse) GetBoundCidrList() []string {
	return s.BoundCidrList
}

// SetBoundCidrList sets the value of BoundCidrList.
func (s *AppRoleReadBoundCidrListResponse) SetBoundCidrList(val []string) {
	s.BoundCidrList = val
}

// Ref: #/components/schemas/AppRoleReadLocalSecretIdsResponse
type AppRoleReadLocalSecretIdsResponse struct {
	// If true, the secret identifiers generated using this role will be cluster local. This can only be
	// set during role creation and once set, it can't be reset later.
	LocalSecretIds OptBool `json:"local_secret_ids"`
}

// GetLocalSecretIds returns the value of LocalSecretIds.
func (s *AppRoleReadLocalSecretIdsResponse) GetLocalSecretIds() OptBool {
	return s.LocalSecretIds
}

// SetLocalSecretIds sets the value of LocalSecretIds.
func (s *AppRoleReadLocalSecretIdsResponse) SetLocalSecretIds(val OptBool) {
	s.LocalSecretIds = val
}

// Ref: #/components/schemas/AppRoleReadPeriodResponse
type AppRoleReadPeriodResponse struct {
	// Use "token_period" instead. If this and "token_period" are both specified, only "token_period"
	// will be used.
	//
	// Deprecated: schema marks this property as deprecated.
	Period OptDuration `json:"period"`
	// If set, tokens created via this role will have no max lifetime; instead, their renewal period will
	// be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. "24h").
	TokenPeriod OptDuration `json:"token_period"`
}

// GetPeriod returns the value of Period.
func (s *AppRoleReadPeriodResponse) GetPeriod() OptDuration {
	return s.Period
}

// GetTokenPeriod returns the value of TokenPeriod.
func (s *AppRoleReadPeriodResponse) GetTokenPeriod() OptDuration {
	return s.TokenPeriod
}

// SetPeriod sets the value of Period.
func (s *AppRoleReadPeriodResponse) SetPeriod(val OptDuration) {
	s.Period = val
}

// SetTokenPeriod sets the value of TokenPeriod.
func (s *AppRoleReadPeriodResponse) SetTokenPeriod(val OptDuration) {
	s.TokenPeriod = val
}

// Ref: #/components/schemas/AppRoleReadPoliciesResponse
type AppRoleReadPoliciesResponse struct {
	// Use "token_policies" instead. If this and "token_policies" are both specified, only
	// "token_policies" will be used.
	//
	// Deprecated: schema marks this property as deprecated.
	Policies []string `json:"policies"`
	// Comma-separated list of policies.
	TokenPolicies []string `json:"token_policies"`
}

// GetPolicies returns the value of Policies.
func (s *AppRoleReadPoliciesResponse) GetPolicies() []string {
	return s.Policies
}

// GetTokenPolicies returns the value of TokenPolicies.
func (s *AppRoleReadPoliciesResponse) GetTokenPolicies() []string {
	return s.TokenPolicies
}

// SetPolicies sets the value of Policies.
func (s *AppRoleReadPoliciesResponse) SetPolicies(val []string) {
	s.Policies = val
}

// SetTokenPolicies sets the value of TokenPolicies.
func (s *AppRoleReadPoliciesResponse) SetTokenPolicies(val []string) {
	s.TokenPolicies = val
}

// Ref: #/components/schemas/AppRoleReadRoleIdResponse
type AppRoleReadRoleIdResponse struct {
	// Identifier of the role. Defaults to a UUID.
	RoleID OptString `json:"role_id"`
}

// GetRoleID returns the value of RoleID.
func (s *AppRoleReadRoleIdResponse) GetRoleID() OptString {
	return s.RoleID
}

// SetRoleID sets the value of RoleID.
func (s *AppRoleReadRoleIdResponse) SetRoleID(val OptString) {
	s.RoleID = val
}

// Ref: #/components/schemas/AppRoleReadRoleResponse
type AppRoleReadRoleResponse struct {
	// Impose secret ID to be presented when logging in using this role.
	BindSecretID OptBool `json:"bind_secret_id"`
	// If true, the secret identifiers generated using this role will be cluster local. This can only be
	// set during role creation and once set, it can't be reset later.
	LocalSecretIds OptBool `json:"local_secret_ids"`
	// Use "token_period" instead. If this and "token_period" are both specified, only "token_period"
	// will be used.
	//
	// Deprecated: schema marks this property as deprecated.
	Period OptDuration `json:"period"`
	// Use "token_policies" instead. If this and "token_policies" are both specified, only
	// "token_policies" will be used.
	//
	// Deprecated: schema marks this property as deprecated.
	Policies []string `json:"policies"`
	// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which
	// can perform the login operation.
	SecretIDBoundCidrs []string `json:"secret_id_bound_cidrs"`
	// Number of times a secret ID can access the role, after which the secret ID will expire.
	SecretIDNumUses OptInt `json:"secret_id_num_uses"`
	// Duration in seconds after which the issued secret ID expires.
	SecretIDTTL OptDuration `json:"secret_id_ttl"`
	// Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses
	// which are allowed to use the generated token.
	TokenBoundCidrs []string `json:"token_bound_cidrs"`
	// If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current
	// maximum TTL values of the role and the mount are not checked for changes, and any updates to these
	// values will have no effect on the token being renewed.
	TokenExplicitMaxTTL OptDuration `json:"token_explicit_max_ttl"`
	// The maximum lifetime of the generated token.
	TokenMaxTTL OptDuration `json:"token_max_ttl"`
	// If true, the 'default' policy will not automatically be added to generated tokens.
	TokenNoDefaultPolicy OptBool `json:"token_no_default_policy"`
	// The maximum number of times a token may be used, a value of zero means unlimited.
	TokenNumUses OptInt `json:"token_num_uses"`
	// If set, tokens created via this role will have no max lifetime; instead, their renewal period will
	// be fixed to this value.
	TokenPeriod OptDuration `json:"token_period"`
	// Comma-separated list of policies.
	TokenPolicies []string `json:"token_policies"`
	// The initial ttl of the token to generate.
	TokenTTL OptDuration `json:"token_ttl"`
	// The type of token to generate, service or batch.
	TokenType OptString `json:"token_type"`
}

// GetBindSecretID returns the value of BindSecretID.
func (s *AppRoleReadRoleResponse) GetBindSecretID() OptBool {
	return s.BindSecretID
}

// GetLocalSecretIds returns the value of LocalSecretIds.
func (s *AppRoleReadRoleResponse) GetLocalSecretIds() OptBool {
	return s.LocalSecretIds
}

// GetPeriod returns the value of Period.
func (s *AppRoleReadRoleResponse) GetPeriod() OptDuration {
	return s.Period
}

// GetPolicies returns the value of Policies.
func (s *AppRoleReadRoleResponse) GetPolicies() []string {
	return s.Policies
}

// GetSecretIDBoundCidrs returns the value of SecretIDBoundCidrs.
func (s *AppRoleReadRoleResponse) GetSecretIDBoundCidrs() []string {
	return s.SecretIDBoundCidrs
}

// GetSecretIDNumUses returns the value of SecretIDNumUses.
func (s *AppRoleReadRoleResponse) GetSecretIDNumUses() OptInt {
	return s.SecretIDNumUses
}

// GetSecretIDTTL returns the value of SecretIDTTL.
func (s *AppRoleReadRoleResponse) GetSecretIDTTL() OptDuration {
	return s.SecretIDTTL
}

// GetTokenBoundCidrs returns the value of TokenBoundCidrs.
func (s *AppRoleReadRoleResponse) GetTokenBoundCidrs() []string {
	return s.TokenBoundCidrs
}

// GetTokenExplicitMaxTTL returns the value of TokenExplicitMaxTTL.
func (s *AppRoleReadRoleResponse) GetTokenExplicitMaxTTL() OptDuration {
	return s.TokenExplicitMaxTTL
}

// GetTokenMaxTTL returns the value of TokenMaxTTL.
func (s *AppRoleReadRoleResponse) GetTokenMaxTTL() OptDuration {
	return s.TokenMaxTTL
}

// GetTokenNoDefaultPolicy returns the value of TokenNoDefaultPolicy.
func (s *AppRoleReadRoleResponse) GetTokenNoDefaultPolicy() OptBool {
	return s.TokenNoDefaultPolicy
}

// GetTokenNumUses returns the value of TokenNumUses.
func (s *AppRoleReadRoleResponse) GetTokenNumUses() OptInt {
	return s.TokenNumUses
}

// GetTokenPeriod returns the value of TokenPeriod.
func (s *AppRoleReadRoleResponse) GetTokenPeriod() OptDuration {
	return s.TokenPeriod
}

// GetTokenPolicies returns the value of TokenPolicies.
func (s *AppRoleReadRoleResponse) GetTokenPolicies() []string {
	return s.TokenPolicies
}

// GetTokenTTL returns the value of TokenTTL.
func (s *AppRoleReadRoleResponse) GetTokenTTL() OptDuration {
	return s.TokenTTL
}

// GetTokenType returns the value of TokenType.
func (s *AppRoleReadRoleResponse) GetTokenType() OptString {
	return s.TokenType
}

// SetBindSecretID sets the value of BindSecretID.
func (s *AppRoleReadRoleResponse) SetBindSecretID(val OptBool) {
	s.BindSecretID = val
}

// SetLocalSecretIds sets the value of LocalSecretIds.
func (s *AppRoleReadRoleResponse) SetLocalSecretIds(val OptBool) {
	s.LocalSecretIds = val
}

// SetPeriod sets the value of Period.
func (s *AppRoleReadRoleResponse) SetPeriod(val OptDuration) {
	s.Period = val
}

// SetPolicies sets the value of Policies.
func (s *AppRoleReadRoleResponse) SetPolicies(val []string) {
	s.Policies = val
}

// SetSecretIDBoundCidrs sets the value of SecretIDBoundCidrs.
func (s *AppRoleReadRoleResponse) SetSecretIDBoundCidrs(val []string) {
	s.SecretIDBoundCidrs = val
}

// SetSecretIDNumUses sets the value of SecretIDNumUses.
func (s *AppRoleReadRoleResponse) SetSecretIDNumUses(val OptInt) {
	s.SecretIDNumUses = val
}

// SetSecretIDTTL sets the value of SecretIDTTL.
func (s *AppRoleReadRoleResponse) SetSecretIDTTL(val OptDuration) {
	s.SecretIDTTL = val
}

// SetTokenBoundCidrs sets the value of TokenBoundCidrs.
func (s *AppRoleReadRoleResponse) SetTokenBoundCidrs(val []string) {
	s.TokenBoundCidrs = val
}

// SetTokenExplicitMaxTTL sets the value of TokenExplicitMaxTTL.
func (s *AppRoleReadRoleResponse) SetTokenExplicitMaxTTL(val OptDuration) {
	s.TokenExplicitMaxTTL = val
}

// SetTokenMaxTTL sets the value of TokenMaxTTL.
func (s *AppRoleReadRoleResponse) SetTokenMaxTTL(val OptDuration) {
	s.TokenMaxTTL = val
}

// SetTokenNoDefaultPolicy sets the value of TokenNoDefaultPolicy.
func (s *AppRoleReadRoleResponse) SetTokenNoDefaultPolicy(val OptBool) {
	s.TokenNoDefaultPolicy = val
}

// SetTokenNumUses sets the value of TokenNumUses.
func (s *AppRoleReadRoleResponse) SetTokenNumUses(val OptInt) {
	s.TokenNumUses = val
}

// SetTokenPeriod sets the value of TokenPeriod.
func (s *AppRoleReadRoleResponse) SetTokenPeriod(val OptDuration) {
	s.TokenPeriod = val
}

// SetTokenPolicies sets the value of TokenPolicies.
func (s *AppRoleReadRoleResponse) SetTokenPolicies(val []string) {
	s.TokenPolicies = val
}

// SetTokenTTL sets the value of TokenTTL.
func (s *AppRoleReadRoleResponse) SetTokenTTL(val OptDuration) {
	s.TokenTTL = val
}

// SetTokenType sets the value of TokenType.
func (s *AppRoleReadRoleResponse) SetTokenType(val OptString) {
	s.TokenType = val
}

// Ref: #/components/schemas/AppRoleReadSecretIdBoundCidrsResponse
type AppRoleReadSecretIdBoundCidrsResponse struct {
	// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which
	// can perform the login operation.
	SecretIDBoundCidrs []string `json:"secret_id_bound_cidrs"`
}

// GetSecretIDBoundCidrs returns the value of SecretIDBoundCidrs.
func (s *AppRoleReadSecretIdBoundCidrsResponse) GetSecretIDBoundCidrs() []string {
	return s.SecretIDBoundCidrs
}

// SetSecretIDBoundCidrs sets the value of SecretIDBoundCidrs.
func (s *AppRoleReadSecretIdBoundCidrsResponse) SetSecretIDBoundCidrs(val []string) {
	s.SecretIDBoundCidrs = val
}

// Ref: #/components/schemas/AppRoleReadSecretIdNumUsesResponse
type AppRoleReadSecretIdNumUsesResponse struct {
	// Number of times a secret ID can access the role, after which the SecretID will expire. Defaults to
	// 0 meaning that the secret ID is of unlimited use.
	SecretIDNumUses OptInt `json:"secret_id_num_uses"`
}

// GetSecretIDNumUses returns the value of SecretIDNumUses.
func (s *AppRoleReadSecretIdNumUsesResponse) GetSecretIDNumUses() OptInt {
	return s.SecretIDNumUses
}

// SetSecretIDNumUses sets the value of SecretIDNumUses.
func (s *AppRoleReadSecretIdNumUsesResponse) SetSecretIDNumUses(val OptInt) {
	s.SecretIDNumUses = val
}

// Ref: #/components/schemas/AppRoleReadSecretIdTtlResponse
type AppRoleReadSecretIdTtlResponse struct {
	// Duration in seconds after which the issued secret ID should expire. Defaults to 0, meaning no
	// expiration.
	SecretIDTTL OptDuration `json:"secret_id_ttl"`
}

// GetSecretIDTTL returns the value of SecretIDTTL.
func (s *AppRoleReadSecretIdTtlResponse) GetSecretIDTTL() OptDuration {
	return s.SecretIDTTL
}

// SetSecretIDTTL sets the value of SecretIDTTL.
func (s *AppRoleReadSecretIdTtlResponse) SetSecretIDTTL(val OptDuration) {
	s.SecretIDTTL = val
}

// Ref: #/components/schemas/AppRoleReadTokenBoundCidrsResponse
type AppRoleReadTokenBoundCidrsResponse struct {
	// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which
	// can use the returned token. Should be a subset of the token CIDR blocks listed on the role, if any.
	TokenBoundCidrs []string `json:"token_bound_cidrs"`
}

// GetTokenBoundCidrs returns the value of TokenBoundCidrs.
func (s *AppRoleReadTokenBoundCidrsResponse) GetTokenBoundCidrs() []string {
	return s.TokenBoundCidrs
}

// SetTokenBoundCidrs sets the value of TokenBoundCidrs.
func (s *AppRoleReadTokenBoundCidrsResponse) SetTokenBoundCidrs(val []string) {
	s.TokenBoundCidrs = val
}

// Ref: #/components/schemas/AppRoleReadTokenMaxTtlResponse
type AppRoleReadTokenMaxTtlResponse struct {
	// The maximum lifetime of the generated token.
	TokenMaxTTL OptDuration `json:"token_max_ttl"`
}

// GetTokenMaxTTL returns the value of TokenMaxTTL.
func (s *AppRoleReadTokenMaxTtlResponse) GetTokenMaxTTL() OptDuration {
	return s.TokenMaxTTL
}

// SetTokenMaxTTL sets the value of TokenMaxTTL.
func (s *AppRoleReadTokenMaxTtlResponse) SetTokenMaxTTL(val OptDuration) {
	s.TokenMaxTTL = val
}

// Ref: #/components/schemas/AppRoleReadTokenNumUsesResponse
type AppRoleReadTokenNumUsesResponse struct {
	// The maximum number of times a token may be used, a value of zero means unlimited.
	TokenNumUses OptInt `json:"token_num_uses"`
}

// GetTokenNumUses returns the value of TokenNumUses.
func (s *AppRoleReadTokenNumUsesResponse) GetTokenNumUses() OptInt {
	return s.TokenNumUses
}

// SetTokenNumUses sets the value of TokenNumUses.
func (s *AppRoleReadTokenNumUsesResponse) SetTokenNumUses(val OptInt) {
	s.TokenNumUses = val
}

// Ref: #/components/schemas/AppRoleReadTokenTtlResponse
type AppRoleReadTokenTtlResponse struct {
	// The initial ttl of the token to generate.
	TokenTTL OptDuration `json:"token_ttl"`
}

// GetTokenTTL returns the value of TokenTTL.
func (s *AppRoleReadTokenTtlResponse) GetTokenTTL() OptDuration {
	return s.TokenTTL
}

// SetTokenTTL sets the value of TokenTTL.
func (s *AppRoleReadTokenTtlResponse) SetTokenTTL(val OptDuration) {
	s.TokenTTL = val
}

// AppRoleTidySecretIDAccepted is response for AppRoleTidySecretID operation.
type AppRoleTidySecretIDAccepted struct{}

// AppRoleWriteBindSecretIDNoContent is response for AppRoleWriteBindSecretID operation.
type AppRoleWriteBindSecretIDNoContent struct{}

// Ref: #/components/schemas/AppRoleWriteBindSecretIdRequest
type AppRoleWriteBindSecretIdRequest struct {
	// Impose secret_id to be presented when logging in using this role.
	BindSecretID OptBool `json:"bind_secret_id"`
}

// GetBindSecretID returns the value of BindSecretID.
func (s *AppRoleWriteBindSecretIdRequest) GetBindSecretID() OptBool {
	return s.BindSecretID
}

// SetBindSecretID sets the value of BindSecretID.
func (s *AppRoleWriteBindSecretIdRequest) SetBindSecretID(val OptBool) {
	s.BindSecretID = val
}

// AppRoleWriteBoundCidrListNoContent is response for AppRoleWriteBoundCidrList operation.
type AppRoleWriteBoundCidrListNoContent struct{}

// Ref: #/components/schemas/AppRoleWriteBoundCidrListRequest
type AppRoleWriteBoundCidrListRequest struct {
	// Deprecated: Please use "secret_id_bound_cidrs" instead. Comma separated string or list of CIDR
	// blocks. If set, specifies the blocks of IP addresses which can perform the login operation.
	BoundCidrList []string `json:"bound_cidr_list"`
}

// GetBoundCidrList returns the value of BoundCidrList.
func (s *AppRoleWriteBoundCidrListRequest) GetBoundCidrList() []string {
	return s.BoundCidrList
}

// SetBoundCidrList sets the value of BoundCidrList.
func (s *AppRoleWriteBoundCidrListRequest) SetBoundCidrList(val []string) {
	s.BoundCidrList = val
}

// Ref: #/components/schemas/AppRoleWriteCustomSecretIdRequest
type AppRoleWriteCustomSecretIdRequest struct {
	// Comma separated string or list of CIDR blocks enforcing secret IDs to be used from specific set of
	// IP addresses. If 'bound_cidr_list' is set on the role, then the list of CIDR blocks listed here
	// should be a subset of the CIDR blocks listed on the role.
	CidrList []string `json:"cidr_list"`
	// Metadata to be tied to the SecretID. This should be a JSON formatted string containing metadata in
	// key value pairs.
	Metadata OptString `json:"metadata"`
	// Number of times this SecretID can be used, after which the SecretID expires. Overrides
	// secret_id_num_uses role option when supplied. May not be higher than role's secret_id_num_uses.
	NumUses OptInt `json:"num_uses"`
	// SecretID to be attached to the role.
	SecretID OptString `json:"secret_id"`
	// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which
	// can use the returned token. Should be a subset of the token CIDR blocks listed on the role, if any.
	TokenBoundCidrs []string `json:"token_bound_cidrs"`
	// Duration in seconds after which this SecretID expires. Overrides secret_id_ttl role option when
	// supplied. May not be longer than role's secret_id_ttl.
	TTL OptDuration `json:"ttl"`
}

// GetCidrList returns the value of CidrList.
func (s *AppRoleWriteCustomSecretIdRequest) GetCidrList() []string {
	return s.CidrList
}

// GetMetadata returns the value of Metadata.
func (s *AppRoleWriteCustomSecretIdRequest) GetMetadata() OptString {
	return s.Metadata
}

// GetNumUses returns the value of NumUses.
func (s *AppRoleWriteCustomSecretIdRequest) GetNumUses() OptInt {
	return s.NumUses
}

// GetSecretID returns the value of SecretID.
func (s *AppRoleWriteCustomSecretIdRequest) GetSecretID() OptString {
	return s.SecretID
}

// GetTokenBoundCidrs returns the value of TokenBoundCidrs.
func (s *AppRoleWriteCustomSecretIdRequest) GetTokenBoundCidrs() []string {
	return s.TokenBoundCidrs
}

// GetTTL returns the value of TTL.
func (s *AppRoleWriteCustomSecretIdRequest) GetTTL() OptDuration {
	return s.TTL
}

// SetCidrList sets the value of CidrList.
func (s *AppRoleWriteCustomSecretIdRequest) SetCidrList(val []string) {
	s.CidrList = val
}

// SetMetadata sets the value of Metadata.
func (s *AppRoleWriteCustomSecretIdRequest) SetMetadata(val OptString) {
	s.Metadata = val
}

// SetNumUses sets the value of NumUses.
func (s *AppRoleWriteCustomSecretIdRequest) SetNumUses(val OptInt) {
	s.NumUses = val
}

// SetSecretID sets the value of SecretID.
func (s *AppRoleWriteCustomSecretIdRequest) SetSecretID(val OptString) {
	s.SecretID = val
}

// SetTokenBoundCidrs sets the value of TokenBoundCidrs.
func (s *AppRoleWriteCustomSecretIdRequest) SetTokenBoundCidrs(val []string) {
	s.TokenBoundCidrs = val
}

// SetTTL sets the value of TTL.
func (s *AppRoleWriteCustomSecretIdRequest) SetTTL(val OptDuration) {
	s.TTL = val
}

// Ref: #/components/schemas/AppRoleWriteCustomSecretIdResponse
type AppRoleWriteCustomSecretIdResponse struct {
	// Secret ID attached to the role.
	SecretID OptString `json:"secret_id"`
	// Accessor of the secret ID.
	SecretIDAccessor OptString `json:"secret_id_accessor"`
	// Number of times a secret ID can access the role, after which the secret ID will expire.
	SecretIDNumUses OptInt `json:"secret_id_num_uses"`
	// Duration in seconds after which the issued secret ID expires.
	SecretIDTTL OptDuration `json:"secret_id_ttl"`
}

// GetSecretID returns the value of SecretID.
func (s *AppRoleWriteCustomSecretIdResponse) GetSecretID() OptString {
	return s.SecretID
}

// GetSecretIDAccessor returns the value of SecretIDAccessor.
func (s *AppRoleWriteCustomSecretIdResponse) GetSecretIDAccessor() OptString {
	return s.SecretIDAccessor
}

// GetSecretIDNumUses returns the value of SecretIDNumUses.
func (s *AppRoleWriteCustomSecretIdResponse) GetSecretIDNumUses() OptInt {
	return s.SecretIDNumUses
}

// GetSecretIDTTL returns the value of SecretIDTTL.
func (s *AppRoleWriteCustomSecretIdResponse) GetSecretIDTTL() OptDuration {
	return s.SecretIDTTL
}

// SetSecretID sets the value of SecretID.
func (s *AppRoleWriteCustomSecretIdResponse) SetSecretID(val OptString) {
	s.SecretID = val
}

// SetSecretIDAccessor sets the value of SecretIDAccessor.
func (s *AppRoleWriteCustomSecretIdResponse) SetSecretIDAccessor(val OptString) {
	s.SecretIDAccessor = val
}

// SetSecretIDNumUses sets the value of SecretIDNumUses.
func (s *AppRoleWriteCustomSecretIdResponse) SetSecretIDNumUses(val OptInt) {
	s.SecretIDNumUses = val
}

// SetSecretIDTTL sets the value of SecretIDTTL.
func (s *AppRoleWriteCustomSecretIdResponse) SetSecretIDTTL(val OptDuration) {
	s.SecretIDTTL = val
}

// AppRoleWritePeriodNoContent is response for AppRoleWritePeriod operation.
type AppRoleWritePeriodNoContent struct{}

// Ref: #/components/schemas/AppRoleWritePeriodRequest
type AppRoleWritePeriodRequest struct {
	// Use "token_period" instead. If this and "token_period" are both specified, only "token_period"
	// will be used.
	//
	// Deprecated: schema marks this property as deprecated.
	Period OptDuration `json:"period"`
	// If set, tokens created via this role will have no max lifetime; instead, their renewal period will
	// be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. "24h").
	TokenPeriod OptDuration `json:"token_period"`
}

// GetPeriod returns the value of Period.
func (s *AppRoleWritePeriodRequest) GetPeriod() OptDuration {
	return s.Period
}

// GetTokenPeriod returns the value of TokenPeriod.
func (s *AppRoleWritePeriodRequest) GetTokenPeriod() OptDuration {
	return s.TokenPeriod
}

// SetPeriod sets the value of Period.
func (s *AppRoleWritePeriodRequest) SetPeriod(val OptDuration) {
	s.Period = val
}

// SetTokenPeriod sets the value of TokenPeriod.
func (s *AppRoleWritePeriodRequest) SetTokenPeriod(val OptDuration) {
	s.TokenPeriod = val
}

// AppRoleWritePoliciesNoContent is response for AppRoleWritePolicies operation.
type AppRoleWritePoliciesNoContent struct{}

// Ref: #/components/schemas/AppRoleWritePoliciesRequest
type AppRoleWritePoliciesRequest struct {
	// Use "token_policies" instead. If this and "token_policies" are both specified, only
	// "token_policies" will be used.
	//
	// Deprecated: schema marks this property as deprecated.
	Policies []string `json:"policies"`
	// Comma-separated list of policies.
	TokenPolicies []string `json:"token_policies"`
}

// GetPolicies returns the value of Policies.
func (s *AppRoleWritePoliciesRequest) GetPolicies() []string {
	return s.Policies
}

// GetTokenPolicies returns the value of TokenPolicies.
func (s *AppRoleWritePoliciesRequest) GetTokenPolicies() []string {
	return s.TokenPolicies
}

// SetPolicies sets the value of Policies.
func (s *AppRoleWritePoliciesRequest) SetPolicies(val []string) {
	s.Policies = val
}

// SetTokenPolicies sets the value of TokenPolicies.
func (s *AppRoleWritePoliciesRequest) SetTokenPolicies(val []string) {
	s.TokenPolicies = val
}

// AppRoleWriteRoleIDNoContent is response for AppRoleWriteRoleID operation.
type AppRoleWriteRoleIDNoContent struct{}

// Ref: #/components/schemas/AppRoleWriteRoleIdRequest
type AppRoleWriteRoleIdRequest struct {
	// Identifier of the role. Defaults to a UUID.
	RoleID OptString `json:"role_id"`
}

// GetRoleID returns the value of RoleID.
func (s *AppRoleWriteRoleIdRequest) GetRoleID() OptString {
	return s.RoleID
}

// SetRoleID sets the value of RoleID.
func (s *AppRoleWriteRoleIdRequest) SetRoleID(val OptString) {
	s.RoleID = val
}

// AppRoleWriteRoleOK is response for AppRoleWriteRole operation.
type AppRoleWriteRoleOK struct{}

// Ref: #/components/schemas/AppRoleWriteRoleRequest
type AppRoleWriteRoleRequest struct {
	// Impose secret_id to be presented when logging in using this role. Defaults to 'true'.
	BindSecretID OptBool `json:"bind_secret_id"`
	// Use "secret_id_bound_cidrs" instead.
	//
	// Deprecated: schema marks this property as deprecated.
	BoundCidrList []string `json:"bound_cidr_list"`
	// If set, the secret IDs generated using this role will be cluster local. This can only be set
	// during role creation and once set, it can't be reset later.
	LocalSecretIds OptBool `json:"local_secret_ids"`
	// Use "token_period" instead. If this and "token_period" are both specified, only "token_period"
	// will be used.
	//
	// Deprecated: schema marks this property as deprecated.
	Period OptDuration `json:"period"`
	// Use "token_policies" instead. If this and "token_policies" are both specified, only
	// "token_policies" will be used.
	//
	// Deprecated: schema marks this property as deprecated.
	Policies []string `json:"policies"`
	// Identifier of the role. Defaults to a UUID.
	RoleID OptString `json:"role_id"`
	// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which
	// can perform the login operation.
	SecretIDBoundCidrs []string `json:"secret_id_bound_cidrs"`
	// Number of times a SecretID can access the role, after which the SecretID will expire. Defaults to
	// 0 meaning that the the secret_id is of unlimited use.
	SecretIDNumUses OptInt `json:"secret_id_num_uses"`
	// Duration in seconds after which the issued SecretID should expire. Defaults to 0, meaning no
	// expiration.
	SecretIDTTL OptDuration `json:"secret_id_ttl"`
	// Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses
	// which are allowed to use the generated token.
	TokenBoundCidrs []string `json:"token_bound_cidrs"`
	// If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current
	// maximum TTL values of the role and the mount are not checked for changes, and any updates to these
	// values will have no effect on the token being renewed.
	TokenExplicitMaxTTL OptDuration `json:"token_explicit_max_ttl"`
	// The maximum lifetime of the generated token.
	TokenMaxTTL OptDuration `json:"token_max_ttl"`
	// If true, the 'default' policy will not automatically be added to generated tokens.
	TokenNoDefaultPolicy OptBool `json:"token_no_default_policy"`
	// The maximum number of times a token may be used, a value of zero means unlimited.
	TokenNumUses OptInt `json:"token_num_uses"`
	// If set, tokens created via this role will have no max lifetime; instead, their renewal period will
	// be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. "24h").
	TokenPeriod OptDuration `json:"token_period"`
	// Comma-separated list of policies.
	TokenPolicies []string `json:"token_policies"`
	// The initial ttl of the token to generate.
	TokenTTL OptDuration `json:"token_ttl"`
	// The type of token to generate, service or batch.
	TokenType OptString `json:"token_type"`
}

// GetBindSecretID returns the value of BindSecretID.
func (s *AppRoleWriteRoleRequest) GetBindSecretID() OptBool {
	return s.BindSecretID
}

// GetBoundCidrList returns the value of BoundCidrList.
func (s *AppRoleWriteRoleRequest) GetBoundCidrList() []string {
	return s.BoundCidrList
}

// GetLocalSecretIds returns the value of LocalSecretIds.
func (s *AppRoleWriteRoleRequest) GetLocalSecretIds() OptBool {
	return s.LocalSecretIds
}

// GetPeriod returns the value of Period.
func (s *AppRoleWriteRoleRequest) GetPeriod() OptDuration {
	return s.Period
}

// GetPolicies returns the value of Policies.
func (s *AppRoleWriteRoleRequest) GetPolicies() []string {
	return s.Policies
}

// GetRoleID returns the value of RoleID.
func (s *AppRoleWriteRoleRequest) GetRoleID() OptString {
	return s.RoleID
}

// GetSecretIDBoundCidrs returns the value of SecretIDBoundCidrs.
func (s *AppRoleWriteRoleRequest) GetSecretIDBoundCidrs() []string {
	return s.SecretIDBoundCidrs
}

// GetSecretIDNumUses returns the value of SecretIDNumUses.
func (s *AppRoleWriteRoleRequest) GetSecretIDNumUses() OptInt {
	return s.SecretIDNumUses
}

// GetSecretIDTTL returns the value of SecretIDTTL.
func (s *AppRoleWriteRoleRequest) GetSecretIDTTL() OptDuration {
	return s.SecretIDTTL
}

// GetTokenBoundCidrs returns the value of TokenBoundCidrs.
func (s *AppRoleWriteRoleRequest) GetTokenBoundCidrs() []string {
	return s.TokenBoundCidrs
}

// GetTokenExplicitMaxTTL returns the value of TokenExplicitMaxTTL.
func (s *AppRoleWriteRoleRequest) GetTokenExplicitMaxTTL() OptDuration {
	return s.TokenExplicitMaxTTL
}

// GetTokenMaxTTL returns the value of TokenMaxTTL.
func (s *AppRoleWriteRoleRequest) GetTokenMaxTTL() OptDuration {
	return s.TokenMaxTTL
}

// GetTokenNoDefaultPolicy returns the value of TokenNoDefaultPolicy.
func (s *AppRoleWriteRoleRequest) GetTokenNoDefaultPolicy() OptBool {
	return s.TokenNoDefaultPolicy
}

// GetTokenNumUses returns the value of TokenNumUses.
func (s *AppRoleWriteRoleRequest) GetTokenNumUses() OptInt {
	return s.TokenNumUses
}

// GetTokenPeriod returns the value of TokenPeriod.
func (s *AppRoleWriteRoleRequest) GetTokenPeriod() OptDuration {
	return s.TokenPeriod
}

// GetTokenPolicies returns the value of TokenPolicies.
func (s *AppRoleWriteRoleRequest) GetTokenPolicies() []string {
	return s.TokenPolicies
}

// GetTokenTTL returns the value of TokenTTL.
func (s *AppRoleWriteRoleRequest) GetTokenTTL() OptDuration {
	return s.TokenTTL
}

// GetTokenType returns the value of TokenType.
func (s *AppRoleWriteRoleRequest) GetTokenType() OptString {
	return s.TokenType
}

// SetBindSecretID sets the value of BindSecretID.
func (s *AppRoleWriteRoleRequest) SetBindSecretID(val OptBool) {
	s.BindSecretID = val
}

// SetBoundCidrList sets the value of BoundCidrList.
func (s *AppRoleWriteRoleRequest) SetBoundCidrList(val []string) {
	s.BoundCidrList = val
}

// SetLocalSecretIds sets the value of LocalSecretIds.
func (s *AppRoleWriteRoleRequest) SetLocalSecretIds(val OptBool) {
	s.LocalSecretIds = val
}

// SetPeriod sets the value of Period.
func (s *AppRoleWriteRoleRequest) SetPeriod(val OptDuration) {
	s.Period = val
}

// SetPolicies sets the value of Policies.
func (s *AppRoleWriteRoleRequest) SetPolicies(val []string) {
	s.Policies = val
}

// SetRoleID sets the value of RoleID.
func (s *AppRoleWriteRoleRequest) SetRoleID(val OptString) {
	s.RoleID = val
}

// SetSecretIDBoundCidrs sets the value of SecretIDBoundCidrs.
func (s *AppRoleWriteRoleRequest) SetSecretIDBoundCidrs(val []string) {
	s.SecretIDBoundCidrs = val
}

// SetSecretIDNumUses sets the value of SecretIDNumUses.
func (s *AppRoleWriteRoleRequest) SetSecretIDNumUses(val OptInt) {
	s.SecretIDNumUses = val
}

// SetSecretIDTTL sets the value of SecretIDTTL.
func (s *AppRoleWriteRoleRequest) SetSecretIDTTL(val OptDuration) {
	s.SecretIDTTL = val
}

// SetTokenBoundCidrs sets the value of TokenBoundCidrs.
func (s *AppRoleWriteRoleRequest) SetTokenBoundCidrs(val []string) {
	s.TokenBoundCidrs = val
}

// SetTokenExplicitMaxTTL sets the value of TokenExplicitMaxTTL.
func (s *AppRoleWriteRoleRequest) SetTokenExplicitMaxTTL(val OptDuration) {
	s.TokenExplicitMaxTTL = val
}

// SetTokenMaxTTL sets the value of TokenMaxTTL.
func (s *AppRoleWriteRoleRequest) SetTokenMaxTTL(val OptDuration) {
	s.TokenMaxTTL = val
}

// SetTokenNoDefaultPolicy sets the value of TokenNoDefaultPolicy.
func (s *AppRoleWriteRoleRequest) SetTokenNoDefaultPolicy(val OptBool) {
	s.TokenNoDefaultPolicy = val
}

// SetTokenNumUses sets the value of TokenNumUses.
func (s *AppRoleWriteRoleRequest) SetTokenNumUses(val OptInt) {
	s.TokenNumUses = val
}

// SetTokenPeriod sets the value of TokenPeriod.
func (s *AppRoleWriteRoleRequest) SetTokenPeriod(val OptDuration) {
	s.TokenPeriod = val
}

// SetTokenPolicies sets the value of TokenPolicies.
func (s *AppRoleWriteRoleRequest) SetTokenPolicies(val []string) {
	s.TokenPolicies = val
}

// SetTokenTTL sets the value of TokenTTL.
func (s *AppRoleWriteRoleRequest) SetTokenTTL(val OptDuration) {
	s.TokenTTL = val
}

// SetTokenType sets the value of TokenType.
func (s *AppRoleWriteRoleRequest) SetTokenType(val OptString) {
	s.TokenType = val
}

// AppRoleWriteSecretIDBoundCidrsNoContent is response for AppRoleWriteSecretIDBoundCidrs operation.
type AppRoleWriteSecretIDBoundCidrsNoContent struct{}

// AppRoleWriteSecretIDNumUsesNoContent is response for AppRoleWriteSecretIDNumUses operation.
type AppRoleWriteSecretIDNumUsesNoContent struct{}

// AppRoleWriteSecretIDTTLNoContent is response for AppRoleWriteSecretIDTTL operation.
type AppRoleWriteSecretIDTTLNoContent struct{}

// Ref: #/components/schemas/AppRoleWriteSecretIdBoundCidrsRequest
type AppRoleWriteSecretIdBoundCidrsRequest struct {
	// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which
	// can perform the login operation.
	SecretIDBoundCidrs []string `json:"secret_id_bound_cidrs"`
}

// GetSecretIDBoundCidrs returns the value of SecretIDBoundCidrs.
func (s *AppRoleWriteSecretIdBoundCidrsRequest) GetSecretIDBoundCidrs() []string {
	return s.SecretIDBoundCidrs
}

// SetSecretIDBoundCidrs sets the value of SecretIDBoundCidrs.
func (s *AppRoleWriteSecretIdBoundCidrsRequest) SetSecretIDBoundCidrs(val []string) {
	s.SecretIDBoundCidrs = val
}

// Ref: #/components/schemas/AppRoleWriteSecretIdNumUsesRequest
type AppRoleWriteSecretIdNumUsesRequest struct {
	// Number of times a SecretID can access the role, after which the SecretID will expire.
	SecretIDNumUses OptInt `json:"secret_id_num_uses"`
}

// GetSecretIDNumUses returns the value of SecretIDNumUses.
func (s *AppRoleWriteSecretIdNumUsesRequest) GetSecretIDNumUses() OptInt {
	return s.SecretIDNumUses
}

// SetSecretIDNumUses sets the value of SecretIDNumUses.
func (s *AppRoleWriteSecretIdNumUsesRequest) SetSecretIDNumUses(val OptInt) {
	s.SecretIDNumUses = val
}

// Ref: #/components/schemas/AppRoleWriteSecretIdRequest
type AppRoleWriteSecretIdRequest struct {
	// Comma separated string or list of CIDR blocks enforcing secret IDs to be used from specific set of
	// IP addresses. If 'bound_cidr_list' is set on the role, then the list of CIDR blocks listed here
	// should be a subset of the CIDR blocks listed on the role.
	CidrList []string `json:"cidr_list"`
	// Metadata to be tied to the SecretID. This should be a JSON formatted string containing the
	// metadata in key value pairs.
	Metadata OptString `json:"metadata"`
	// Number of times this SecretID can be used, after which the SecretID expires. Overrides
	// secret_id_num_uses role option when supplied. May not be higher than role's secret_id_num_uses.
	NumUses OptInt `json:"num_uses"`
	// Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses
	// which are allowed to use the generated token.
	TokenBoundCidrs []string `json:"token_bound_cidrs"`
	// Duration in seconds after which this SecretID expires. Overrides secret_id_ttl role option when
	// supplied. May not be longer than role's secret_id_ttl.
	TTL OptDuration `json:"ttl"`
}

// GetCidrList returns the value of CidrList.
func (s *AppRoleWriteSecretIdRequest) GetCidrList() []string {
	return s.CidrList
}

// GetMetadata returns the value of Metadata.
func (s *AppRoleWriteSecretIdRequest) GetMetadata() OptString {
	return s.Metadata
}

// GetNumUses returns the value of NumUses.
func (s *AppRoleWriteSecretIdRequest) GetNumUses() OptInt {
	return s.NumUses
}

// GetTokenBoundCidrs returns the value of TokenBoundCidrs.
func (s *AppRoleWriteSecretIdRequest) GetTokenBoundCidrs() []string {
	return s.TokenBoundCidrs
}

// GetTTL returns the value of TTL.
func (s *AppRoleWriteSecretIdRequest) GetTTL() OptDuration {
	return s.TTL
}

// SetCidrList sets the value of CidrList.
func (s *AppRoleWriteSecretIdRequest) SetCidrList(val []string) {
	s.CidrList = val
}

// SetMetadata sets the value of Metadata.
func (s *AppRoleWriteSecretIdRequest) SetMetadata(val OptString) {
	s.Metadata = val
}

// SetNumUses sets the value of NumUses.
func (s *AppRoleWriteSecretIdRequest) SetNumUses(val OptInt) {
	s.NumUses = val
}

// SetTokenBoundCidrs sets the value of TokenBoundCidrs.
func (s *AppRoleWriteSecretIdRequest) SetTokenBoundCidrs(val []string) {
	s.TokenBoundCidrs = val
}

// SetTTL sets the value of TTL.
func (s *AppRoleWriteSecretIdRequest) SetTTL(val OptDuration) {
	s.TTL = val
}

// Ref: #/components/schemas/AppRoleWriteSecretIdResponse
type AppRoleWriteSecretIdResponse struct {
	// Secret ID attached to the role.
	SecretID OptString `json:"secret_id"`
	// Accessor of the secret ID.
	SecretIDAccessor OptString `json:"secret_id_accessor"`
	// Number of times a secret ID can access the role, after which the secret ID will expire.
	SecretIDNumUses OptInt `json:"secret_id_num_uses"`
	// Duration in seconds after which the issued secret ID expires.
	SecretIDTTL OptDuration `json:"secret_id_ttl"`
}

// GetSecretID returns the value of SecretID.
func (s *AppRoleWriteSecretIdResponse) GetSecretID() OptString {
	return s.SecretID
}

// GetSecretIDAccessor returns the value of SecretIDAccessor.
func (s *AppRoleWriteSecretIdResponse) GetSecretIDAccessor() OptString {
	return s.SecretIDAccessor
}

// GetSecretIDNumUses returns the value of SecretIDNumUses.
func (s *AppRoleWriteSecretIdResponse) GetSecretIDNumUses() OptInt {
	return s.SecretIDNumUses
}

// GetSecretIDTTL returns the value of SecretIDTTL.
func (s *AppRoleWriteSecretIdResponse) GetSecretIDTTL() OptDuration {
	return s.SecretIDTTL
}

// SetSecretID sets the value of SecretID.
func (s *AppRoleWriteSecretIdResponse) SetSecretID(val OptString) {
	s.SecretID = val
}

// SetSecretIDAccessor sets the value of SecretIDAccessor.
func (s *AppRoleWriteSecretIdResponse) SetSecretIDAccessor(val OptString) {
	s.SecretIDAccessor = val
}

// SetSecretIDNumUses sets the value of SecretIDNumUses.
func (s *AppRoleWriteSecretIdResponse) SetSecretIDNumUses(val OptInt) {
	s.SecretIDNumUses = val
}

// SetSecretIDTTL sets the value of SecretIDTTL.
func (s *AppRoleWriteSecretIdResponse) SetSecretIDTTL(val OptDuration) {
	s.SecretIDTTL = val
}

// Ref: #/components/schemas/AppRoleWriteSecretIdTtlRequest
type AppRoleWriteSecretIdTtlRequest struct {
	// Duration in seconds after which the issued SecretID should expire. Defaults to 0, meaning no
	// expiration.
	SecretIDTTL OptDuration `json:"secret_id_ttl"`
}

// GetSecretIDTTL returns the value of SecretIDTTL.
func (s *AppRoleWriteSecretIdTtlRequest) GetSecretIDTTL() OptDuration {
	return s.SecretIDTTL
}

// SetSecretIDTTL sets the value of SecretIDTTL.
func (s *AppRoleWriteSecretIdTtlRequest) SetSecretIDTTL(val OptDuration) {
	s.SecretIDTTL = val
}

// AppRoleWriteTokenBoundCidrsNoContent is response for AppRoleWriteTokenBoundCidrs operation.
type AppRoleWriteTokenBoundCidrsNoContent struct{}

// Ref: #/components/schemas/AppRoleWriteTokenBoundCidrsRequest
type AppRoleWriteTokenBoundCidrsRequest struct {
	// Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses
	// which are allowed to use the generated token.
	TokenBoundCidrs []string `json:"token_bound_cidrs"`
}

// GetTokenBoundCidrs returns the value of TokenBoundCidrs.
func (s *AppRoleWriteTokenBoundCidrsRequest) GetTokenBoundCidrs() []string {
	return s.TokenBoundCidrs
}

// SetTokenBoundCidrs sets the value of TokenBoundCidrs.
func (s *AppRoleWriteTokenBoundCidrsRequest) SetTokenBoundCidrs(val []string) {
	s.TokenBoundCidrs = val
}

// AppRoleWriteTokenMaxTTLNoContent is response for AppRoleWriteTokenMaxTTL operation.
type AppRoleWriteTokenMaxTTLNoContent struct{}

// Ref: #/components/schemas/AppRoleWriteTokenMaxTtlRequest
type AppRoleWriteTokenMaxTtlRequest struct {
	// The maximum lifetime of the generated token.
	TokenMaxTTL OptDuration `json:"token_max_ttl"`
}

// GetTokenMaxTTL returns the value of TokenMaxTTL.
func (s *AppRoleWriteTokenMaxTtlRequest) GetTokenMaxTTL() OptDuration {
	return s.TokenMaxTTL
}

// SetTokenMaxTTL sets the value of TokenMaxTTL.
func (s *AppRoleWriteTokenMaxTtlRequest) SetTokenMaxTTL(val OptDuration) {
	s.TokenMaxTTL = val
}

// AppRoleWriteTokenNumUsesNoContent is response for AppRoleWriteTokenNumUses operation.
type AppRoleWriteTokenNumUsesNoContent struct{}

// Ref: #/components/schemas/AppRoleWriteTokenNumUsesRequest
type AppRoleWriteTokenNumUsesRequest struct {
	// The maximum number of times a token may be used, a value of zero means unlimited.
	TokenNumUses OptInt `json:"token_num_uses"`
}

// GetTokenNumUses returns the value of TokenNumUses.
func (s *AppRoleWriteTokenNumUsesRequest) GetTokenNumUses() OptInt {
	return s.TokenNumUses
}

// SetTokenNumUses sets the value of TokenNumUses.
func (s *AppRoleWriteTokenNumUsesRequest) SetTokenNumUses(val OptInt) {
	s.TokenNumUses = val
}

// AppRoleWriteTokenTTLNoContent is response for AppRoleWriteTokenTTL operation.
type AppRoleWriteTokenTTLNoContent struct{}

// Ref: #/components/schemas/AppRoleWriteTokenTtlRequest
type AppRoleWriteTokenTtlRequest struct {
	// The initial ttl of the token to generate.
	TokenTTL OptDuration `json:"token_ttl"`
}

// GetTokenTTL returns the value of TokenTTL.
func (s *AppRoleWriteTokenTtlRequest) GetTokenTTL() OptDuration {
	return s.TokenTTL
}

// SetTokenTTL sets the value of TokenTTL.
func (s *AppRoleWriteTokenTtlRequest) SetTokenTTL(val OptDuration) {
	s.TokenTTL = val
}

// KvV2ConfigureNoContent is response for KvV2Configure operation.
type KvV2ConfigureNoContent struct{}

// Ref: #/components/schemas/KvV2ConfigureRequest
type KvV2ConfigureRequest struct {
	// If true, the backend will require the cas parameter to be set for each write.
	CasRequired OptBool `json:"cas_required"`
	// If set, the length of time before a version is deleted. A negative duration disables the use of
	// delete_version_after on all keys. A zero duration clears the current setting. Accepts a Go
	// duration format string.
	DeleteVersionAfter OptDuration `json:"delete_version_after"`
	// The number of versions to keep for each key. Defaults to 10.
	MaxVersions OptInt `json:"max_versions"`
}

// GetCasRequired returns the value of CasRequired.
func (s *KvV2ConfigureRequest) GetCasRequired() OptBool {
	return s.CasRequired
}

// GetDeleteVersionAfter returns the value of DeleteVersionAfter.
func (s *KvV2ConfigureRequest) GetDeleteVersionAfter() OptDuration {
	return s.DeleteVersionAfter
}

// GetMaxVersions returns the value of MaxVersions.
func (s *KvV2ConfigureRequest) GetMaxVersions() OptInt {
	return s.MaxVersions
}

// SetCasRequired sets the value of CasRequired.
func (s *KvV2ConfigureRequest) SetCasRequired(val OptBool) {
	s.CasRequired = val
}

// SetDeleteVersionAfter sets the value of DeleteVersionAfter.
func (s *KvV2ConfigureRequest) SetDeleteVersionAfter(val OptDuration) {
	s.DeleteVersionAfter = val
}

// SetMaxVersions sets the value of MaxVersions.
func (s *KvV2ConfigureRequest) SetMaxVersions(val OptInt) {
	s.MaxVersions = val
}

// KvV2DeleteMetadataAndAllVersionsNoContent is response for KvV2DeleteMetadataAndAllVersions operation.
type KvV2DeleteMetadataAndAllVersionsNoContent struct{}

// KvV2DeleteNoContent is response for KvV2Delete operation.
type KvV2DeleteNoContent struct{}

// KvV2DeleteVersionsNoContent is response for KvV2DeleteVersions operation.
type KvV2DeleteVersionsNoContent struct{}

// Ref: #/components/schemas/KvV2DeleteVersionsRequest
type KvV2DeleteVersionsRequest struct {
	// The versions to be archived. The versioned data will not be deleted, but it will no longer be
	// returned in normal get requests.
	Versions []int `json:"versions"`
}

// GetVersions returns the value of Versions.
func (s *KvV2DeleteVersionsRequest) GetVersions() []int {
	return s.Versions
}

// SetVersions sets the value of Versions.
func (s *KvV2DeleteVersionsRequest) SetVersions(val []int) {
	s.Versions = val
}

// KvV2DestroyVersionsNoContent is response for KvV2DestroyVersions operation.
type KvV2DestroyVersionsNoContent struct{}

// Ref: #/components/schemas/KvV2DestroyVersionsRequest
type KvV2DestroyVersionsRequest struct {
	// The versions to destroy. Their data will be permanently deleted.
	Versions []int `json:"versions"`
}

// GetVersions returns the value of Versions.
func (s *KvV2DestroyVersionsRequest) GetVersions() []int {
	return s.Versions
}

// SetVersions sets the value of Versions.
func (s *KvV2DestroyVersionsRequest) SetVersions(val []int) {
	s.Versions = val
}

type KvV2ListList string

const (
	KvV2ListListTrue KvV2ListList = "true"
)

// AllValues returns all KvV2ListList values.
func (KvV2ListList) AllValues() []KvV2ListList {
	return []KvV2ListList{
		KvV2ListListTrue,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s KvV2ListList) MarshalText() ([]byte, error) {
	switch s {
	case KvV2ListListTrue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *KvV2ListList) UnmarshalText(data []byte) error {
	switch KvV2ListList(data) {
	case KvV2ListListTrue:
		*s = KvV2ListListTrue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/KvV2ReadConfigurationResponse
type KvV2ReadConfigurationResponse struct {
	// If true, the backend will require the cas parameter to be set for each write.
	CasRequired OptBool `json:"cas_required"`
	// The length of time before a version is deleted.
	DeleteVersionAfter OptDuration `json:"delete_version_after"`
	// The number of versions to keep for each key.
	MaxVersions OptInt `json:"max_versions"`
}

// GetCasRequired returns the value of CasRequired.
func (s *KvV2ReadConfigurationResponse) GetCasRequired() OptBool {
	return s.CasRequired
}

// GetDeleteVersionAfter returns the value of DeleteVersionAfter.
func (s *KvV2ReadConfigurationResponse) GetDeleteVersionAfter() OptDuration {
	return s.DeleteVersionAfter
}

// GetMaxVersions returns the value of MaxVersions.
func (s *KvV2ReadConfigurationResponse) GetMaxVersions() OptInt {
	return s.MaxVersions
}

// SetCasRequired sets the value of CasRequired.
func (s *KvV2ReadConfigurationResponse) SetCasRequired(val OptBool) {
	s.CasRequired = val
}

// SetDeleteVersionAfter sets the value of DeleteVersionAfter.
func (s *KvV2ReadConfigurationResponse) SetDeleteVersionAfter(val OptDuration) {
	s.DeleteVersionAfter = val
}

// SetMaxVersions sets the value of MaxVersions.
func (s *KvV2ReadConfigurationResponse) SetMaxVersions(val OptInt) {
	s.MaxVersions = val
}

// Ref: #/components/schemas/KvV2ReadMetadataResponse
type KvV2ReadMetadataResponse struct {
	CasRequired    OptBool     `json:"cas_required"`
	CreatedTime    OptDateTime `json:"created_time"`
	CurrentVersion OptInt64    `json:"current_version"`
	// User-provided key-value pairs that are used to describe arbitrary and version-agnostic information
	// about a secret.
	CustomMetadata OptKvV2ReadMetadataResponseCustomMetadata `json:"custom_metadata"`
	// The length of time before a version is deleted.
	DeleteVersionAfter OptDuration `json:"delete_version_after"`
	// The number of versions to keep.
	MaxVersions   OptInt64                            `json:"max_versions"`
	OldestVersion OptInt64                            `json:"oldest_version"`
	UpdatedTime   OptDateTime                         `json:"updated_time"`
	Versions      OptKvV2ReadMetadataResponseVersions `json:"versions"`
}

// GetCasRequired returns the value of CasRequired.
func (s *KvV2ReadMetadataResponse) GetCasRequired() OptBool {
	return s.CasRequired
}

// GetCreatedTime returns the value of CreatedTime.
func (s *KvV2ReadMetadataResponse) GetCreatedTime() OptDateTime {
	return s.CreatedTime
}

// GetCurrentVersion returns the value of CurrentVersion.
func (s *KvV2ReadMetadataResponse) GetCurrentVersion() OptInt64 {
	return s.CurrentVersion
}

// GetCustomMetadata returns the value of CustomMetadata.
func (s *KvV2ReadMetadataResponse) GetCustomMetadata() OptKvV2ReadMetadataResponseCustomMetadata {
	return s.CustomMetadata
}

// GetDeleteVersionAfter returns the value of DeleteVersionAfter.
func (s *KvV2ReadMetadataResponse) GetDeleteVersionAfter() OptDuration {
	return s.DeleteVersionAfter
}

// GetMaxVersions returns the value of MaxVersions.
func (s *KvV2ReadMetadataResponse) GetMaxVersions() OptInt64 {
	return s.MaxVersions
}

// GetOldestVersion returns the value of OldestVersion.
func (s *KvV2ReadMetadataResponse) GetOldestVersion() OptInt64 {
	return s.OldestVersion
}

// GetUpdatedTime returns the value of UpdatedTime.
func (s *KvV2ReadMetadataResponse) GetUpdatedTime() OptDateTime {
	return s.UpdatedTime
}

// GetVersions returns the value of Versions.
func (s *KvV2ReadMetadataResponse) GetVersions() OptKvV2ReadMetadataResponseVersions {
	return s.Versions
}

// SetCasRequired sets the value of CasRequired.
func (s *KvV2ReadMetadataResponse) SetCasRequired(val OptBool) {
	s.CasRequired = val
}

// SetCreatedTime sets the value of CreatedTime.
func (s *KvV2ReadMetadataResponse) SetCreatedTime(val OptDateTime) {
	s.CreatedTime = val
}

// SetCurrentVersion sets the value of CurrentVersion.
func (s *KvV2ReadMetadataResponse) SetCurrentVersion(val OptInt64) {
	s.CurrentVersion = val
}

// SetCustomMetadata sets the value of CustomMetadata.
func (s *KvV2ReadMetadataResponse) SetCustomMetadata(val OptKvV2ReadMetadataResponseCustomMetadata) {
	s.CustomMetadata = val
}

// SetDeleteVersionAfter sets the value of DeleteVersionAfter.
func (s *KvV2ReadMetadataResponse) SetDeleteVersionAfter(val OptDuration) {
	s.DeleteVersionAfter = val
}

// SetMaxVersions sets the value of MaxVersions.
func (s *KvV2ReadMetadataResponse) SetMaxVersions(val OptInt64) {
	s.MaxVersions = val
}

// SetOldestVersion sets the value of OldestVersion.
func (s *KvV2ReadMetadataResponse) SetOldestVersion(val OptInt64) {
	s.OldestVersion = val
}

// SetUpdatedTime sets the value of UpdatedTime.
func (s *KvV2ReadMetadataResponse) SetUpdatedTime(val OptDateTime) {
	s.UpdatedTime = val
}

// SetVersions sets the value of Versions.
func (s *KvV2ReadMetadataResponse) SetVersions(val OptKvV2ReadMetadataResponseVersions) {
	s.Versions = val
}

// User-provided key-value pairs that are used to describe arbitrary and version-agnostic information
// about a secret.
type KvV2ReadMetadataResponseCustomMetadata map[string]jx.Raw

func (s *KvV2ReadMetadataResponseCustomMetadata) init() KvV2ReadMetadataResponseCustomMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type KvV2ReadMetadataResponseVersions map[string]jx.Raw

func (s *KvV2ReadMetadataResponseVersions) init() KvV2ReadMetadataResponseVersions {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/KvV2ReadResponse
type KvV2ReadResponse struct {
	Data     OptKvV2ReadResponseData     `json:"data"`
	Metadata OptKvV2ReadResponseMetadata `json:"metadata"`
}

// GetData returns the value of Data.
func (s *KvV2ReadResponse) GetData() OptKvV2ReadResponseData {
	return s.Data
}

// GetMetadata returns the value of Metadata.
func (s *KvV2ReadResponse) GetMetadata() OptKvV2ReadResponseMetadata {
	return s.Metadata
}

// SetData sets the value of Data.
func (s *KvV2ReadResponse) SetData(val OptKvV2ReadResponseData) {
	s.Data = val
}

// SetMetadata sets the value of Metadata.
func (s *KvV2ReadResponse) SetMetadata(val OptKvV2ReadResponseMetadata) {
	s.Metadata = val
}

type KvV2ReadResponseData map[string]jx.Raw

func (s *KvV2ReadResponseData) init() KvV2ReadResponseData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type KvV2ReadResponseMetadata map[string]jx.Raw

func (s *KvV2ReadResponseMetadata) init() KvV2ReadResponseMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/KvV2ReadSubkeysResponse
type KvV2ReadSubkeysResponse struct {
	Metadata OptKvV2ReadSubkeysResponseMetadata `json:"metadata"`
	Subkeys  OptKvV2ReadSubkeysResponseSubkeys  `json:"subkeys"`
}

// GetMetadata returns the value of Metadata.
func (s *KvV2ReadSubkeysResponse) GetMetadata() OptKvV2ReadSubkeysResponseMetadata {
	return s.Metadata
}

// GetSubkeys returns the value of Subkeys.
func (s *KvV2ReadSubkeysResponse) GetSubkeys() OptKvV2ReadSubkeysResponseSubkeys {
	return s.Subkeys
}

// SetMetadata sets the value of Metadata.
func (s *KvV2ReadSubkeysResponse) SetMetadata(val OptKvV2ReadSubkeysResponseMetadata) {
	s.Metadata = val
}

// SetSubkeys sets the value of Subkeys.
func (s *KvV2ReadSubkeysResponse) SetSubkeys(val OptKvV2ReadSubkeysResponseSubkeys) {
	s.Subkeys = val
}

type KvV2ReadSubkeysResponseMetadata map[string]jx.Raw

func (s *KvV2ReadSubkeysResponseMetadata) init() KvV2ReadSubkeysResponseMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type KvV2ReadSubkeysResponseSubkeys map[string]jx.Raw

func (s *KvV2ReadSubkeysResponseSubkeys) init() KvV2ReadSubkeysResponseSubkeys {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// KvV2UndeleteVersionsNoContent is response for KvV2UndeleteVersions operation.
type KvV2UndeleteVersionsNoContent struct{}

// Ref: #/components/schemas/KvV2UndeleteVersionsRequest
type KvV2UndeleteVersionsRequest struct {
	// The versions to unarchive. The versions will be restored and their data will be returned on normal
	// get requests.
	Versions []int `json:"versions"`
}

// GetVersions returns the value of Versions.
func (s *KvV2UndeleteVersionsRequest) GetVersions() []int {
	return s.Versions
}

// SetVersions sets the value of Versions.
func (s *KvV2UndeleteVersionsRequest) SetVersions(val []int) {
	s.Versions = val
}

// KvV2WriteMetadataNoContent is response for KvV2WriteMetadata operation.
type KvV2WriteMetadataNoContent struct{}

// Ref: #/components/schemas/KvV2WriteMetadataRequest
type KvV2WriteMetadataRequest struct {
	// If true the key will require the cas parameter to be set on all write requests. If false, the
	// backend’s configuration will be used.
	CasRequired OptBool `json:"cas_required"`
	// User-provided key-value pairs that are used to describe arbitrary and version-agnostic information
	// about a secret.
	CustomMetadata OptKvV2WriteMetadataRequestCustomMetadata `json:"custom_metadata"`
	// The length of time before a version is deleted. If not set, the backend's configured
	// delete_version_after is used. Cannot be greater than the backend's delete_version_after. A zero
	// duration clears the current setting. A negative duration will cause an error.
	DeleteVersionAfter OptDuration `json:"delete_version_after"`
	// The number of versions to keep. If not set, the backend’s configured max version is used.
	MaxVersions OptInt `json:"max_versions"`
}

// GetCasRequired returns the value of CasRequired.
func (s *KvV2WriteMetadataRequest) GetCasRequired() OptBool {
	return s.CasRequired
}

// GetCustomMetadata returns the value of CustomMetadata.
func (s *KvV2WriteMetadataRequest) GetCustomMetadata() OptKvV2WriteMetadataRequestCustomMetadata {
	return s.CustomMetadata
}

// GetDeleteVersionAfter returns the value of DeleteVersionAfter.
func (s *KvV2WriteMetadataRequest) GetDeleteVersionAfter() OptDuration {
	return s.DeleteVersionAfter
}

// GetMaxVersions returns the value of MaxVersions.
func (s *KvV2WriteMetadataRequest) GetMaxVersions() OptInt {
	return s.MaxVersions
}

// SetCasRequired sets the value of CasRequired.
func (s *KvV2WriteMetadataRequest) SetCasRequired(val OptBool) {
	s.CasRequired = val
}

// SetCustomMetadata sets the value of CustomMetadata.
func (s *KvV2WriteMetadataRequest) SetCustomMetadata(val OptKvV2WriteMetadataRequestCustomMetadata) {
	s.CustomMetadata = val
}

// SetDeleteVersionAfter sets the value of DeleteVersionAfter.
func (s *KvV2WriteMetadataRequest) SetDeleteVersionAfter(val OptDuration) {
	s.DeleteVersionAfter = val
}

// SetMaxVersions sets the value of MaxVersions.
func (s *KvV2WriteMetadataRequest) SetMaxVersions(val OptInt) {
	s.MaxVersions = val
}

// User-provided key-value pairs that are used to describe arbitrary and version-agnostic information
// about a secret.
type KvV2WriteMetadataRequestCustomMetadata map[string]jx.Raw

func (s *KvV2WriteMetadataRequestCustomMetadata) init() KvV2WriteMetadataRequestCustomMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/KvV2WriteRequest
type KvV2WriteRequest struct {
	// The contents of the data map will be stored and returned on read.
	Data OptKvV2WriteRequestData `json:"data"`
	// Options for writing a KV entry. Set the "cas" value to use a Check-And-Set operation. If not set
	// the write will be allowed. If set to 0 a write will only be allowed if the key doesn’t exist. If
	// the index is non-zero the write will only be allowed if the key’s current version matches the
	// version specified in the cas parameter.
	Options OptKvV2WriteRequestOptions `json:"options"`
	// If provided during a read, the value at the version number will be returned.
	Version OptInt `json:"version"`
}

// GetData returns the value of Data.
func (s *KvV2WriteRequest) GetData() OptKvV2WriteRequestData {
	return s.Data
}

// GetOptions returns the value of Options.
func (s *KvV2WriteRequest) GetOptions() OptKvV2WriteRequestOptions {
	return s.Options
}

// GetVersion returns the value of Version.
func (s *KvV2WriteRequest) GetVersion() OptInt {
	return s.Version
}

// SetData sets the value of Data.
func (s *KvV2WriteRequest) SetData(val OptKvV2WriteRequestData) {
	s.Data = val
}

// SetOptions sets the value of Options.
func (s *KvV2WriteRequest) SetOptions(val OptKvV2WriteRequestOptions) {
	s.Options = val
}

// SetVersion sets the value of Version.
func (s *KvV2WriteRequest) SetVersion(val OptInt) {
	s.Version = val
}

// The contents of the data map will be stored and returned on read.
type KvV2WriteRequestData map[string]jx.Raw

func (s *KvV2WriteRequestData) init() KvV2WriteRequestData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Options for writing a KV entry. Set the "cas" value to use a Check-And-Set operation. If not set
// the write will be allowed. If set to 0 a write will only be allowed if the key doesn’t exist. If
// the index is non-zero the write will only be allowed if the key’s current version matches the
// version specified in the cas parameter.
type KvV2WriteRequestOptions map[string]jx.Raw

func (s *KvV2WriteRequestOptions) init() KvV2WriteRequestOptions {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/KvV2WriteResponse
type KvV2WriteResponse struct {
	CreatedTime    OptDateTime                        `json:"created_time"`
	CustomMetadata OptKvV2WriteResponseCustomMetadata `json:"custom_metadata"`
	DeletionTime   OptString                          `json:"deletion_time"`
	Destroyed      OptBool                            `json:"destroyed"`
	Version        OptInt64                           `json:"version"`
}

// GetCreatedTime returns the value of CreatedTime.
func (s *KvV2WriteResponse) GetCreatedTime() OptDateTime {
	return s.CreatedTime
}

// GetCustomMetadata returns the value of CustomMetadata.
func (s *KvV2WriteResponse) GetCustomMetadata() OptKvV2WriteResponseCustomMetadata {
	return s.CustomMetadata
}

// GetDeletionTime returns the value of DeletionTime.
func (s *KvV2WriteResponse) GetDeletionTime() OptString {
	return s.DeletionTime
}

// GetDestroyed returns the value of Destroyed.
func (s *KvV2WriteResponse) GetDestroyed() OptBool {
	return s.Destroyed
}

// GetVersion returns the value of Version.
func (s *KvV2WriteResponse) GetVersion() OptInt64 {
	return s.Version
}

// SetCreatedTime sets the value of CreatedTime.
func (s *KvV2WriteResponse) SetCreatedTime(val OptDateTime) {
	s.CreatedTime = val
}

// SetCustomMetadata sets the value of CustomMetadata.
func (s *KvV2WriteResponse) SetCustomMetadata(val OptKvV2WriteResponseCustomMetadata) {
	s.CustomMetadata = val
}

// SetDeletionTime sets the value of DeletionTime.
func (s *KvV2WriteResponse) SetDeletionTime(val OptString) {
	s.DeletionTime = val
}

// SetDestroyed sets the value of Destroyed.
func (s *KvV2WriteResponse) SetDestroyed(val OptBool) {
	s.Destroyed = val
}

// SetVersion sets the value of Version.
func (s *KvV2WriteResponse) SetVersion(val OptInt64) {
	s.Version = val
}

type KvV2WriteResponseCustomMetadata map[string]jx.Raw

func (s *KvV2WriteResponseCustomMetadata) init() KvV2WriteResponseCustomMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// NewOptAppRoleLookUpSecretIdByAccessorResponseMetadata returns new OptAppRoleLookUpSecretIdByAccessorResponseMetadata with value set to v.
func NewOptAppRoleLookUpSecretIdByAccessorResponseMetadata(v AppRoleLookUpSecretIdByAccessorResponseMetadata) OptAppRoleLookUpSecretIdByAccessorResponseMetadata {
	return OptAppRoleLookUpSecretIdByAccessorResponseMetadata{
		Value: v,
		Set:   true,
	}
}

// OptAppRoleLookUpSecretIdByAccessorResponseMetadata is optional AppRoleLookUpSecretIdByAccessorResponseMetadata.
type OptAppRoleLookUpSecretIdByAccessorResponseMetadata struct {
	Value AppRoleLookUpSecretIdByAccessorResponseMetadata
	Set   bool
}

// IsSet returns true if OptAppRoleLookUpSecretIdByAccessorResponseMetadata was set.
func (o OptAppRoleLookUpSecretIdByAccessorResponseMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppRoleLookUpSecretIdByAccessorResponseMetadata) Reset() {
	var v AppRoleLookUpSecretIdByAccessorResponseMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppRoleLookUpSecretIdByAccessorResponseMetadata) SetTo(v AppRoleLookUpSecretIdByAccessorResponseMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppRoleLookUpSecretIdByAccessorResponseMetadata) Get() (v AppRoleLookUpSecretIdByAccessorResponseMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppRoleLookUpSecretIdByAccessorResponseMetadata) Or(d AppRoleLookUpSecretIdByAccessorResponseMetadata) AppRoleLookUpSecretIdByAccessorResponseMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppRoleLookUpSecretIdResponseMetadata returns new OptAppRoleLookUpSecretIdResponseMetadata with value set to v.
func NewOptAppRoleLookUpSecretIdResponseMetadata(v AppRoleLookUpSecretIdResponseMetadata) OptAppRoleLookUpSecretIdResponseMetadata {
	return OptAppRoleLookUpSecretIdResponseMetadata{
		Value: v,
		Set:   true,
	}
}

// OptAppRoleLookUpSecretIdResponseMetadata is optional AppRoleLookUpSecretIdResponseMetadata.
type OptAppRoleLookUpSecretIdResponseMetadata struct {
	Value AppRoleLookUpSecretIdResponseMetadata
	Set   bool
}

// IsSet returns true if OptAppRoleLookUpSecretIdResponseMetadata was set.
func (o OptAppRoleLookUpSecretIdResponseMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppRoleLookUpSecretIdResponseMetadata) Reset() {
	var v AppRoleLookUpSecretIdResponseMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppRoleLookUpSecretIdResponseMetadata) SetTo(v AppRoleLookUpSecretIdResponseMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppRoleLookUpSecretIdResponseMetadata) Get() (v AppRoleLookUpSecretIdResponseMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppRoleLookUpSecretIdResponseMetadata) Or(d AppRoleLookUpSecretIdResponseMetadata) AppRoleLookUpSecretIdResponseMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDuration returns new OptDuration with value set to v.
func NewOptDuration(v time.Duration) OptDuration {
	return OptDuration{
		Value: v,
		Set:   true,
	}
}

// OptDuration is optional time.Duration.
type OptDuration struct {
	Value time.Duration
	Set   bool
}

// IsSet returns true if OptDuration was set.
func (o OptDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDuration) Reset() {
	var v time.Duration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDuration) SetTo(v time.Duration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDuration) Get() (v time.Duration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDuration) Or(d time.Duration) time.Duration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKvV2ReadMetadataResponseCustomMetadata returns new OptKvV2ReadMetadataResponseCustomMetadata with value set to v.
func NewOptKvV2ReadMetadataResponseCustomMetadata(v KvV2ReadMetadataResponseCustomMetadata) OptKvV2ReadMetadataResponseCustomMetadata {
	return OptKvV2ReadMetadataResponseCustomMetadata{
		Value: v,
		Set:   true,
	}
}

// OptKvV2ReadMetadataResponseCustomMetadata is optional KvV2ReadMetadataResponseCustomMetadata.
type OptKvV2ReadMetadataResponseCustomMetadata struct {
	Value KvV2ReadMetadataResponseCustomMetadata
	Set   bool
}

// IsSet returns true if OptKvV2ReadMetadataResponseCustomMetadata was set.
func (o OptKvV2ReadMetadataResponseCustomMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKvV2ReadMetadataResponseCustomMetadata) Reset() {
	var v KvV2ReadMetadataResponseCustomMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKvV2ReadMetadataResponseCustomMetadata) SetTo(v KvV2ReadMetadataResponseCustomMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKvV2ReadMetadataResponseCustomMetadata) Get() (v KvV2ReadMetadataResponseCustomMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKvV2ReadMetadataResponseCustomMetadata) Or(d KvV2ReadMetadataResponseCustomMetadata) KvV2ReadMetadataResponseCustomMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKvV2ReadMetadataResponseVersions returns new OptKvV2ReadMetadataResponseVersions with value set to v.
func NewOptKvV2ReadMetadataResponseVersions(v KvV2ReadMetadataResponseVersions) OptKvV2ReadMetadataResponseVersions {
	return OptKvV2ReadMetadataResponseVersions{
		Value: v,
		Set:   true,
	}
}

// OptKvV2ReadMetadataResponseVersions is optional KvV2ReadMetadataResponseVersions.
type OptKvV2ReadMetadataResponseVersions struct {
	Value KvV2ReadMetadataResponseVersions
	Set   bool
}

// IsSet returns true if OptKvV2ReadMetadataResponseVersions was set.
func (o OptKvV2ReadMetadataResponseVersions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKvV2ReadMetadataResponseVersions) Reset() {
	var v KvV2ReadMetadataResponseVersions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKvV2ReadMetadataResponseVersions) SetTo(v KvV2ReadMetadataResponseVersions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKvV2ReadMetadataResponseVersions) Get() (v KvV2ReadMetadataResponseVersions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKvV2ReadMetadataResponseVersions) Or(d KvV2ReadMetadataResponseVersions) KvV2ReadMetadataResponseVersions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKvV2ReadResponseData returns new OptKvV2ReadResponseData with value set to v.
func NewOptKvV2ReadResponseData(v KvV2ReadResponseData) OptKvV2ReadResponseData {
	return OptKvV2ReadResponseData{
		Value: v,
		Set:   true,
	}
}

// OptKvV2ReadResponseData is optional KvV2ReadResponseData.
type OptKvV2ReadResponseData struct {
	Value KvV2ReadResponseData
	Set   bool
}

// IsSet returns true if OptKvV2ReadResponseData was set.
func (o OptKvV2ReadResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKvV2ReadResponseData) Reset() {
	var v KvV2ReadResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKvV2ReadResponseData) SetTo(v KvV2ReadResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKvV2ReadResponseData) Get() (v KvV2ReadResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKvV2ReadResponseData) Or(d KvV2ReadResponseData) KvV2ReadResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKvV2ReadResponseMetadata returns new OptKvV2ReadResponseMetadata with value set to v.
func NewOptKvV2ReadResponseMetadata(v KvV2ReadResponseMetadata) OptKvV2ReadResponseMetadata {
	return OptKvV2ReadResponseMetadata{
		Value: v,
		Set:   true,
	}
}

// OptKvV2ReadResponseMetadata is optional KvV2ReadResponseMetadata.
type OptKvV2ReadResponseMetadata struct {
	Value KvV2ReadResponseMetadata
	Set   bool
}

// IsSet returns true if OptKvV2ReadResponseMetadata was set.
func (o OptKvV2ReadResponseMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKvV2ReadResponseMetadata) Reset() {
	var v KvV2ReadResponseMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKvV2ReadResponseMetadata) SetTo(v KvV2ReadResponseMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKvV2ReadResponseMetadata) Get() (v KvV2ReadResponseMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKvV2ReadResponseMetadata) Or(d KvV2ReadResponseMetadata) KvV2ReadResponseMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKvV2ReadSubkeysResponseMetadata returns new OptKvV2ReadSubkeysResponseMetadata with value set to v.
func NewOptKvV2ReadSubkeysResponseMetadata(v KvV2ReadSubkeysResponseMetadata) OptKvV2ReadSubkeysResponseMetadata {
	return OptKvV2ReadSubkeysResponseMetadata{
		Value: v,
		Set:   true,
	}
}

// OptKvV2ReadSubkeysResponseMetadata is optional KvV2ReadSubkeysResponseMetadata.
type OptKvV2ReadSubkeysResponseMetadata struct {
	Value KvV2ReadSubkeysResponseMetadata
	Set   bool
}

// IsSet returns true if OptKvV2ReadSubkeysResponseMetadata was set.
func (o OptKvV2ReadSubkeysResponseMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKvV2ReadSubkeysResponseMetadata) Reset() {
	var v KvV2ReadSubkeysResponseMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKvV2ReadSubkeysResponseMetadata) SetTo(v KvV2ReadSubkeysResponseMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKvV2ReadSubkeysResponseMetadata) Get() (v KvV2ReadSubkeysResponseMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKvV2ReadSubkeysResponseMetadata) Or(d KvV2ReadSubkeysResponseMetadata) KvV2ReadSubkeysResponseMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKvV2ReadSubkeysResponseSubkeys returns new OptKvV2ReadSubkeysResponseSubkeys with value set to v.
func NewOptKvV2ReadSubkeysResponseSubkeys(v KvV2ReadSubkeysResponseSubkeys) OptKvV2ReadSubkeysResponseSubkeys {
	return OptKvV2ReadSubkeysResponseSubkeys{
		Value: v,
		Set:   true,
	}
}

// OptKvV2ReadSubkeysResponseSubkeys is optional KvV2ReadSubkeysResponseSubkeys.
type OptKvV2ReadSubkeysResponseSubkeys struct {
	Value KvV2ReadSubkeysResponseSubkeys
	Set   bool
}

// IsSet returns true if OptKvV2ReadSubkeysResponseSubkeys was set.
func (o OptKvV2ReadSubkeysResponseSubkeys) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKvV2ReadSubkeysResponseSubkeys) Reset() {
	var v KvV2ReadSubkeysResponseSubkeys
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKvV2ReadSubkeysResponseSubkeys) SetTo(v KvV2ReadSubkeysResponseSubkeys) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKvV2ReadSubkeysResponseSubkeys) Get() (v KvV2ReadSubkeysResponseSubkeys, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKvV2ReadSubkeysResponseSubkeys) Or(d KvV2ReadSubkeysResponseSubkeys) KvV2ReadSubkeysResponseSubkeys {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKvV2WriteMetadataRequestCustomMetadata returns new OptKvV2WriteMetadataRequestCustomMetadata with value set to v.
func NewOptKvV2WriteMetadataRequestCustomMetadata(v KvV2WriteMetadataRequestCustomMetadata) OptKvV2WriteMetadataRequestCustomMetadata {
	return OptKvV2WriteMetadataRequestCustomMetadata{
		Value: v,
		Set:   true,
	}
}

// OptKvV2WriteMetadataRequestCustomMetadata is optional KvV2WriteMetadataRequestCustomMetadata.
type OptKvV2WriteMetadataRequestCustomMetadata struct {
	Value KvV2WriteMetadataRequestCustomMetadata
	Set   bool
}

// IsSet returns true if OptKvV2WriteMetadataRequestCustomMetadata was set.
func (o OptKvV2WriteMetadataRequestCustomMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKvV2WriteMetadataRequestCustomMetadata) Reset() {
	var v KvV2WriteMetadataRequestCustomMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKvV2WriteMetadataRequestCustomMetadata) SetTo(v KvV2WriteMetadataRequestCustomMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKvV2WriteMetadataRequestCustomMetadata) Get() (v KvV2WriteMetadataRequestCustomMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKvV2WriteMetadataRequestCustomMetadata) Or(d KvV2WriteMetadataRequestCustomMetadata) KvV2WriteMetadataRequestCustomMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKvV2WriteRequestData returns new OptKvV2WriteRequestData with value set to v.
func NewOptKvV2WriteRequestData(v KvV2WriteRequestData) OptKvV2WriteRequestData {
	return OptKvV2WriteRequestData{
		Value: v,
		Set:   true,
	}
}

// OptKvV2WriteRequestData is optional KvV2WriteRequestData.
type OptKvV2WriteRequestData struct {
	Value KvV2WriteRequestData
	Set   bool
}

// IsSet returns true if OptKvV2WriteRequestData was set.
func (o OptKvV2WriteRequestData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKvV2WriteRequestData) Reset() {
	var v KvV2WriteRequestData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKvV2WriteRequestData) SetTo(v KvV2WriteRequestData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKvV2WriteRequestData) Get() (v KvV2WriteRequestData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKvV2WriteRequestData) Or(d KvV2WriteRequestData) KvV2WriteRequestData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKvV2WriteRequestOptions returns new OptKvV2WriteRequestOptions with value set to v.
func NewOptKvV2WriteRequestOptions(v KvV2WriteRequestOptions) OptKvV2WriteRequestOptions {
	return OptKvV2WriteRequestOptions{
		Value: v,
		Set:   true,
	}
}

// OptKvV2WriteRequestOptions is optional KvV2WriteRequestOptions.
type OptKvV2WriteRequestOptions struct {
	Value KvV2WriteRequestOptions
	Set   bool
}

// IsSet returns true if OptKvV2WriteRequestOptions was set.
func (o OptKvV2WriteRequestOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKvV2WriteRequestOptions) Reset() {
	var v KvV2WriteRequestOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKvV2WriteRequestOptions) SetTo(v KvV2WriteRequestOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKvV2WriteRequestOptions) Get() (v KvV2WriteRequestOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKvV2WriteRequestOptions) Or(d KvV2WriteRequestOptions) KvV2WriteRequestOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKvV2WriteResponseCustomMetadata returns new OptKvV2WriteResponseCustomMetadata with value set to v.
func NewOptKvV2WriteResponseCustomMetadata(v KvV2WriteResponseCustomMetadata) OptKvV2WriteResponseCustomMetadata {
	return OptKvV2WriteResponseCustomMetadata{
		Value: v,
		Set:   true,
	}
}

// OptKvV2WriteResponseCustomMetadata is optional KvV2WriteResponseCustomMetadata.
type OptKvV2WriteResponseCustomMetadata struct {
	Value KvV2WriteResponseCustomMetadata
	Set   bool
}

// IsSet returns true if OptKvV2WriteResponseCustomMetadata was set.
func (o OptKvV2WriteResponseCustomMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKvV2WriteResponseCustomMetadata) Reset() {
	var v KvV2WriteResponseCustomMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKvV2WriteResponseCustomMetadata) SetTo(v KvV2WriteResponseCustomMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKvV2WriteResponseCustomMetadata) Get() (v KvV2WriteResponseCustomMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKvV2WriteResponseCustomMetadata) Or(d KvV2WriteResponseCustomMetadata) KvV2WriteResponseCustomMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/StandardListResponse
type StandardListResponse struct {
	Keys []string `json:"keys"`
}

// GetKeys returns the value of Keys.
func (s *StandardListResponse) GetKeys() []string {
	return s.Keys
}

// SetKeys sets the value of Keys.
func (s *StandardListResponse) SetKeys(val []string) {
	s.Keys = val
}
