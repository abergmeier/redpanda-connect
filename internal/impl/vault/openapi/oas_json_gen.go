// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/json"
)

// Encode implements json.Marshaler.
func (s *AppRoleDestroySecretIdByAccessorRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleDestroySecretIdByAccessorRequest) encodeFields(e *jx.Encoder) {
	{
		if s.SecretIDAccessor.Set {
			e.FieldStart("secret_id_accessor")
			s.SecretIDAccessor.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleDestroySecretIdByAccessorRequest = [1]string{
	0: "secret_id_accessor",
}

// Decode decodes AppRoleDestroySecretIdByAccessorRequest from json.
func (s *AppRoleDestroySecretIdByAccessorRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleDestroySecretIdByAccessorRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "secret_id_accessor":
			if err := func() error {
				s.SecretIDAccessor.Reset()
				if err := s.SecretIDAccessor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_accessor\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleDestroySecretIdByAccessorRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleDestroySecretIdByAccessorRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleDestroySecretIdByAccessorRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleDestroySecretIdRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleDestroySecretIdRequest) encodeFields(e *jx.Encoder) {
	{
		if s.SecretID.Set {
			e.FieldStart("secret_id")
			s.SecretID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleDestroySecretIdRequest = [1]string{
	0: "secret_id",
}

// Decode decodes AppRoleDestroySecretIdRequest from json.
func (s *AppRoleDestroySecretIdRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleDestroySecretIdRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "secret_id":
			if err := func() error {
				s.SecretID.Reset()
				if err := s.SecretID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleDestroySecretIdRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleDestroySecretIdRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleDestroySecretIdRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleLoginRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleLoginRequest) encodeFields(e *jx.Encoder) {
	{
		if s.RoleID.Set {
			e.FieldStart("role_id")
			s.RoleID.Encode(e)
		}
	}
	{
		if s.SecretID.Set {
			e.FieldStart("secret_id")
			s.SecretID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleLoginRequest = [2]string{
	0: "role_id",
	1: "secret_id",
}

// Decode decodes AppRoleLoginRequest from json.
func (s *AppRoleLoginRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleLoginRequest to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "role_id":
			if err := func() error {
				s.RoleID.Reset()
				if err := s.RoleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role_id\"")
			}
		case "secret_id":
			if err := func() error {
				s.SecretID.Reset()
				if err := s.SecretID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleLoginRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleLoginRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleLoginRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleLookUpSecretIdByAccessorRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleLookUpSecretIdByAccessorRequest) encodeFields(e *jx.Encoder) {
	{
		if s.SecretIDAccessor.Set {
			e.FieldStart("secret_id_accessor")
			s.SecretIDAccessor.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleLookUpSecretIdByAccessorRequest = [1]string{
	0: "secret_id_accessor",
}

// Decode decodes AppRoleLookUpSecretIdByAccessorRequest from json.
func (s *AppRoleLookUpSecretIdByAccessorRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleLookUpSecretIdByAccessorRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "secret_id_accessor":
			if err := func() error {
				s.SecretIDAccessor.Reset()
				if err := s.SecretIDAccessor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_accessor\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleLookUpSecretIdByAccessorRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleLookUpSecretIdByAccessorRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleLookUpSecretIdByAccessorRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleLookUpSecretIdByAccessorResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleLookUpSecretIdByAccessorResponse) encodeFields(e *jx.Encoder) {
	{
		if s.CidrList != nil {
			e.FieldStart("cidr_list")
			e.ArrStart()
			for _, elem := range s.CidrList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CreationTime.Set {
			e.FieldStart("creation_time")
			s.CreationTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ExpirationTime.Set {
			e.FieldStart("expiration_time")
			s.ExpirationTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.LastUpdatedTime.Set {
			e.FieldStart("last_updated_time")
			s.LastUpdatedTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Metadata.Set {
			e.FieldStart("metadata")
			s.Metadata.Encode(e)
		}
	}
	{
		if s.SecretIDAccessor.Set {
			e.FieldStart("secret_id_accessor")
			s.SecretIDAccessor.Encode(e)
		}
	}
	{
		if s.SecretIDNumUses.Set {
			e.FieldStart("secret_id_num_uses")
			s.SecretIDNumUses.Encode(e)
		}
	}
	{
		if s.SecretIDTTL.Set {
			e.FieldStart("secret_id_ttl")
			s.SecretIDTTL.Encode(e)
		}
	}
	{
		if s.TokenBoundCidrs != nil {
			e.FieldStart("token_bound_cidrs")
			e.ArrStart()
			for _, elem := range s.TokenBoundCidrs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAppRoleLookUpSecretIdByAccessorResponse = [9]string{
	0: "cidr_list",
	1: "creation_time",
	2: "expiration_time",
	3: "last_updated_time",
	4: "metadata",
	5: "secret_id_accessor",
	6: "secret_id_num_uses",
	7: "secret_id_ttl",
	8: "token_bound_cidrs",
}

// Decode decodes AppRoleLookUpSecretIdByAccessorResponse from json.
func (s *AppRoleLookUpSecretIdByAccessorResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleLookUpSecretIdByAccessorResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cidr_list":
			if err := func() error {
				s.CidrList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CidrList = append(s.CidrList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cidr_list\"")
			}
		case "creation_time":
			if err := func() error {
				s.CreationTime.Reset()
				if err := s.CreationTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"creation_time\"")
			}
		case "expiration_time":
			if err := func() error {
				s.ExpirationTime.Reset()
				if err := s.ExpirationTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiration_time\"")
			}
		case "last_updated_time":
			if err := func() error {
				s.LastUpdatedTime.Reset()
				if err := s.LastUpdatedTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_updated_time\"")
			}
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metadata\"")
			}
		case "secret_id_accessor":
			if err := func() error {
				s.SecretIDAccessor.Reset()
				if err := s.SecretIDAccessor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_accessor\"")
			}
		case "secret_id_num_uses":
			if err := func() error {
				s.SecretIDNumUses.Reset()
				if err := s.SecretIDNumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_num_uses\"")
			}
		case "secret_id_ttl":
			if err := func() error {
				s.SecretIDTTL.Reset()
				if err := s.SecretIDTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_ttl\"")
			}
		case "token_bound_cidrs":
			if err := func() error {
				s.TokenBoundCidrs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TokenBoundCidrs = append(s.TokenBoundCidrs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_bound_cidrs\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleLookUpSecretIdByAccessorResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleLookUpSecretIdByAccessorResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleLookUpSecretIdByAccessorResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s AppRoleLookUpSecretIdByAccessorResponseMetadata) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s AppRoleLookUpSecretIdByAccessorResponseMetadata) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes AppRoleLookUpSecretIdByAccessorResponseMetadata from json.
func (s *AppRoleLookUpSecretIdByAccessorResponseMetadata) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleLookUpSecretIdByAccessorResponseMetadata to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleLookUpSecretIdByAccessorResponseMetadata")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AppRoleLookUpSecretIdByAccessorResponseMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleLookUpSecretIdByAccessorResponseMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleLookUpSecretIdRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleLookUpSecretIdRequest) encodeFields(e *jx.Encoder) {
	{
		if s.SecretID.Set {
			e.FieldStart("secret_id")
			s.SecretID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleLookUpSecretIdRequest = [1]string{
	0: "secret_id",
}

// Decode decodes AppRoleLookUpSecretIdRequest from json.
func (s *AppRoleLookUpSecretIdRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleLookUpSecretIdRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "secret_id":
			if err := func() error {
				s.SecretID.Reset()
				if err := s.SecretID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleLookUpSecretIdRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleLookUpSecretIdRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleLookUpSecretIdRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleLookUpSecretIdResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleLookUpSecretIdResponse) encodeFields(e *jx.Encoder) {
	{
		if s.CidrList != nil {
			e.FieldStart("cidr_list")
			e.ArrStart()
			for _, elem := range s.CidrList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CreationTime.Set {
			e.FieldStart("creation_time")
			s.CreationTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ExpirationTime.Set {
			e.FieldStart("expiration_time")
			s.ExpirationTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.LastUpdatedTime.Set {
			e.FieldStart("last_updated_time")
			s.LastUpdatedTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Metadata.Set {
			e.FieldStart("metadata")
			s.Metadata.Encode(e)
		}
	}
	{
		if s.SecretIDAccessor.Set {
			e.FieldStart("secret_id_accessor")
			s.SecretIDAccessor.Encode(e)
		}
	}
	{
		if s.SecretIDNumUses.Set {
			e.FieldStart("secret_id_num_uses")
			s.SecretIDNumUses.Encode(e)
		}
	}
	{
		if s.SecretIDTTL.Set {
			e.FieldStart("secret_id_ttl")
			s.SecretIDTTL.Encode(e)
		}
	}
	{
		if s.TokenBoundCidrs != nil {
			e.FieldStart("token_bound_cidrs")
			e.ArrStart()
			for _, elem := range s.TokenBoundCidrs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAppRoleLookUpSecretIdResponse = [9]string{
	0: "cidr_list",
	1: "creation_time",
	2: "expiration_time",
	3: "last_updated_time",
	4: "metadata",
	5: "secret_id_accessor",
	6: "secret_id_num_uses",
	7: "secret_id_ttl",
	8: "token_bound_cidrs",
}

// Decode decodes AppRoleLookUpSecretIdResponse from json.
func (s *AppRoleLookUpSecretIdResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleLookUpSecretIdResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cidr_list":
			if err := func() error {
				s.CidrList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CidrList = append(s.CidrList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cidr_list\"")
			}
		case "creation_time":
			if err := func() error {
				s.CreationTime.Reset()
				if err := s.CreationTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"creation_time\"")
			}
		case "expiration_time":
			if err := func() error {
				s.ExpirationTime.Reset()
				if err := s.ExpirationTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiration_time\"")
			}
		case "last_updated_time":
			if err := func() error {
				s.LastUpdatedTime.Reset()
				if err := s.LastUpdatedTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_updated_time\"")
			}
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metadata\"")
			}
		case "secret_id_accessor":
			if err := func() error {
				s.SecretIDAccessor.Reset()
				if err := s.SecretIDAccessor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_accessor\"")
			}
		case "secret_id_num_uses":
			if err := func() error {
				s.SecretIDNumUses.Reset()
				if err := s.SecretIDNumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_num_uses\"")
			}
		case "secret_id_ttl":
			if err := func() error {
				s.SecretIDTTL.Reset()
				if err := s.SecretIDTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_ttl\"")
			}
		case "token_bound_cidrs":
			if err := func() error {
				s.TokenBoundCidrs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TokenBoundCidrs = append(s.TokenBoundCidrs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_bound_cidrs\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleLookUpSecretIdResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleLookUpSecretIdResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleLookUpSecretIdResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s AppRoleLookUpSecretIdResponseMetadata) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s AppRoleLookUpSecretIdResponseMetadata) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes AppRoleLookUpSecretIdResponseMetadata from json.
func (s *AppRoleLookUpSecretIdResponseMetadata) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleLookUpSecretIdResponseMetadata to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleLookUpSecretIdResponseMetadata")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AppRoleLookUpSecretIdResponseMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleLookUpSecretIdResponseMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadBindSecretIdResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadBindSecretIdResponse) encodeFields(e *jx.Encoder) {
	{
		if s.BindSecretID.Set {
			e.FieldStart("bind_secret_id")
			s.BindSecretID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleReadBindSecretIdResponse = [1]string{
	0: "bind_secret_id",
}

// Decode decodes AppRoleReadBindSecretIdResponse from json.
func (s *AppRoleReadBindSecretIdResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadBindSecretIdResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bind_secret_id":
			if err := func() error {
				s.BindSecretID.Reset()
				if err := s.BindSecretID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bind_secret_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadBindSecretIdResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadBindSecretIdResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadBindSecretIdResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadBoundCidrListResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadBoundCidrListResponse) encodeFields(e *jx.Encoder) {
	{
		if s.BoundCidrList != nil {
			e.FieldStart("bound_cidr_list")
			e.ArrStart()
			for _, elem := range s.BoundCidrList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAppRoleReadBoundCidrListResponse = [1]string{
	0: "bound_cidr_list",
}

// Decode decodes AppRoleReadBoundCidrListResponse from json.
func (s *AppRoleReadBoundCidrListResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadBoundCidrListResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bound_cidr_list":
			if err := func() error {
				s.BoundCidrList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.BoundCidrList = append(s.BoundCidrList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bound_cidr_list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadBoundCidrListResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadBoundCidrListResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadBoundCidrListResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadLocalSecretIdsResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadLocalSecretIdsResponse) encodeFields(e *jx.Encoder) {
	{
		if s.LocalSecretIds.Set {
			e.FieldStart("local_secret_ids")
			s.LocalSecretIds.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleReadLocalSecretIdsResponse = [1]string{
	0: "local_secret_ids",
}

// Decode decodes AppRoleReadLocalSecretIdsResponse from json.
func (s *AppRoleReadLocalSecretIdsResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadLocalSecretIdsResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "local_secret_ids":
			if err := func() error {
				s.LocalSecretIds.Reset()
				if err := s.LocalSecretIds.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"local_secret_ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadLocalSecretIdsResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadLocalSecretIdsResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadLocalSecretIdsResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadPeriodResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadPeriodResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Period.Set {
			e.FieldStart("period")
			s.Period.Encode(e)
		}
	}
	{
		if s.TokenPeriod.Set {
			e.FieldStart("token_period")
			s.TokenPeriod.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleReadPeriodResponse = [2]string{
	0: "period",
	1: "token_period",
}

// Decode decodes AppRoleReadPeriodResponse from json.
func (s *AppRoleReadPeriodResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadPeriodResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "period":
			if err := func() error {
				s.Period.Reset()
				if err := s.Period.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"period\"")
			}
		case "token_period":
			if err := func() error {
				s.TokenPeriod.Reset()
				if err := s.TokenPeriod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_period\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadPeriodResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadPeriodResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadPeriodResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadPoliciesResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadPoliciesResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Policies != nil {
			e.FieldStart("policies")
			e.ArrStart()
			for _, elem := range s.Policies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TokenPolicies != nil {
			e.FieldStart("token_policies")
			e.ArrStart()
			for _, elem := range s.TokenPolicies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAppRoleReadPoliciesResponse = [2]string{
	0: "policies",
	1: "token_policies",
}

// Decode decodes AppRoleReadPoliciesResponse from json.
func (s *AppRoleReadPoliciesResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadPoliciesResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "policies":
			if err := func() error {
				s.Policies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Policies = append(s.Policies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policies\"")
			}
		case "token_policies":
			if err := func() error {
				s.TokenPolicies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TokenPolicies = append(s.TokenPolicies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_policies\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadPoliciesResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadPoliciesResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadPoliciesResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadRoleIdResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadRoleIdResponse) encodeFields(e *jx.Encoder) {
	{
		if s.RoleID.Set {
			e.FieldStart("role_id")
			s.RoleID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleReadRoleIdResponse = [1]string{
	0: "role_id",
}

// Decode decodes AppRoleReadRoleIdResponse from json.
func (s *AppRoleReadRoleIdResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadRoleIdResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "role_id":
			if err := func() error {
				s.RoleID.Reset()
				if err := s.RoleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadRoleIdResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadRoleIdResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadRoleIdResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadRoleResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadRoleResponse) encodeFields(e *jx.Encoder) {
	{
		if s.BindSecretID.Set {
			e.FieldStart("bind_secret_id")
			s.BindSecretID.Encode(e)
		}
	}
	{
		if s.LocalSecretIds.Set {
			e.FieldStart("local_secret_ids")
			s.LocalSecretIds.Encode(e)
		}
	}
	{
		if s.Period.Set {
			e.FieldStart("period")
			s.Period.Encode(e)
		}
	}
	{
		if s.Policies != nil {
			e.FieldStart("policies")
			e.ArrStart()
			for _, elem := range s.Policies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SecretIDBoundCidrs != nil {
			e.FieldStart("secret_id_bound_cidrs")
			e.ArrStart()
			for _, elem := range s.SecretIDBoundCidrs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SecretIDNumUses.Set {
			e.FieldStart("secret_id_num_uses")
			s.SecretIDNumUses.Encode(e)
		}
	}
	{
		if s.SecretIDTTL.Set {
			e.FieldStart("secret_id_ttl")
			s.SecretIDTTL.Encode(e)
		}
	}
	{
		if s.TokenBoundCidrs != nil {
			e.FieldStart("token_bound_cidrs")
			e.ArrStart()
			for _, elem := range s.TokenBoundCidrs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TokenExplicitMaxTTL.Set {
			e.FieldStart("token_explicit_max_ttl")
			s.TokenExplicitMaxTTL.Encode(e)
		}
	}
	{
		if s.TokenMaxTTL.Set {
			e.FieldStart("token_max_ttl")
			s.TokenMaxTTL.Encode(e)
		}
	}
	{
		if s.TokenNoDefaultPolicy.Set {
			e.FieldStart("token_no_default_policy")
			s.TokenNoDefaultPolicy.Encode(e)
		}
	}
	{
		if s.TokenNumUses.Set {
			e.FieldStart("token_num_uses")
			s.TokenNumUses.Encode(e)
		}
	}
	{
		if s.TokenPeriod.Set {
			e.FieldStart("token_period")
			s.TokenPeriod.Encode(e)
		}
	}
	{
		if s.TokenPolicies != nil {
			e.FieldStart("token_policies")
			e.ArrStart()
			for _, elem := range s.TokenPolicies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TokenTTL.Set {
			e.FieldStart("token_ttl")
			s.TokenTTL.Encode(e)
		}
	}
	{
		if s.TokenType.Set {
			e.FieldStart("token_type")
			s.TokenType.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleReadRoleResponse = [16]string{
	0:  "bind_secret_id",
	1:  "local_secret_ids",
	2:  "period",
	3:  "policies",
	4:  "secret_id_bound_cidrs",
	5:  "secret_id_num_uses",
	6:  "secret_id_ttl",
	7:  "token_bound_cidrs",
	8:  "token_explicit_max_ttl",
	9:  "token_max_ttl",
	10: "token_no_default_policy",
	11: "token_num_uses",
	12: "token_period",
	13: "token_policies",
	14: "token_ttl",
	15: "token_type",
}

// Decode decodes AppRoleReadRoleResponse from json.
func (s *AppRoleReadRoleResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadRoleResponse to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bind_secret_id":
			if err := func() error {
				s.BindSecretID.Reset()
				if err := s.BindSecretID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bind_secret_id\"")
			}
		case "local_secret_ids":
			if err := func() error {
				s.LocalSecretIds.Reset()
				if err := s.LocalSecretIds.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"local_secret_ids\"")
			}
		case "period":
			if err := func() error {
				s.Period.Reset()
				if err := s.Period.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"period\"")
			}
		case "policies":
			if err := func() error {
				s.Policies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Policies = append(s.Policies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policies\"")
			}
		case "secret_id_bound_cidrs":
			if err := func() error {
				s.SecretIDBoundCidrs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.SecretIDBoundCidrs = append(s.SecretIDBoundCidrs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_bound_cidrs\"")
			}
		case "secret_id_num_uses":
			if err := func() error {
				s.SecretIDNumUses.Reset()
				if err := s.SecretIDNumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_num_uses\"")
			}
		case "secret_id_ttl":
			if err := func() error {
				s.SecretIDTTL.Reset()
				if err := s.SecretIDTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_ttl\"")
			}
		case "token_bound_cidrs":
			if err := func() error {
				s.TokenBoundCidrs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TokenBoundCidrs = append(s.TokenBoundCidrs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_bound_cidrs\"")
			}
		case "token_explicit_max_ttl":
			if err := func() error {
				s.TokenExplicitMaxTTL.Reset()
				if err := s.TokenExplicitMaxTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_explicit_max_ttl\"")
			}
		case "token_max_ttl":
			if err := func() error {
				s.TokenMaxTTL.Reset()
				if err := s.TokenMaxTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_max_ttl\"")
			}
		case "token_no_default_policy":
			if err := func() error {
				s.TokenNoDefaultPolicy.Reset()
				if err := s.TokenNoDefaultPolicy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_no_default_policy\"")
			}
		case "token_num_uses":
			if err := func() error {
				s.TokenNumUses.Reset()
				if err := s.TokenNumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_num_uses\"")
			}
		case "token_period":
			if err := func() error {
				s.TokenPeriod.Reset()
				if err := s.TokenPeriod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_period\"")
			}
		case "token_policies":
			if err := func() error {
				s.TokenPolicies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TokenPolicies = append(s.TokenPolicies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_policies\"")
			}
		case "token_ttl":
			if err := func() error {
				s.TokenTTL.Reset()
				if err := s.TokenTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_ttl\"")
			}
		case "token_type":
			if err := func() error {
				s.TokenType.Reset()
				if err := s.TokenType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadRoleResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadRoleResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadRoleResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadSecretIdBoundCidrsResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadSecretIdBoundCidrsResponse) encodeFields(e *jx.Encoder) {
	{
		if s.SecretIDBoundCidrs != nil {
			e.FieldStart("secret_id_bound_cidrs")
			e.ArrStart()
			for _, elem := range s.SecretIDBoundCidrs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAppRoleReadSecretIdBoundCidrsResponse = [1]string{
	0: "secret_id_bound_cidrs",
}

// Decode decodes AppRoleReadSecretIdBoundCidrsResponse from json.
func (s *AppRoleReadSecretIdBoundCidrsResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadSecretIdBoundCidrsResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "secret_id_bound_cidrs":
			if err := func() error {
				s.SecretIDBoundCidrs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.SecretIDBoundCidrs = append(s.SecretIDBoundCidrs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_bound_cidrs\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadSecretIdBoundCidrsResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadSecretIdBoundCidrsResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadSecretIdBoundCidrsResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadSecretIdNumUsesResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadSecretIdNumUsesResponse) encodeFields(e *jx.Encoder) {
	{
		if s.SecretIDNumUses.Set {
			e.FieldStart("secret_id_num_uses")
			s.SecretIDNumUses.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleReadSecretIdNumUsesResponse = [1]string{
	0: "secret_id_num_uses",
}

// Decode decodes AppRoleReadSecretIdNumUsesResponse from json.
func (s *AppRoleReadSecretIdNumUsesResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadSecretIdNumUsesResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "secret_id_num_uses":
			if err := func() error {
				s.SecretIDNumUses.Reset()
				if err := s.SecretIDNumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_num_uses\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadSecretIdNumUsesResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadSecretIdNumUsesResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadSecretIdNumUsesResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadSecretIdTtlResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadSecretIdTtlResponse) encodeFields(e *jx.Encoder) {
	{
		if s.SecretIDTTL.Set {
			e.FieldStart("secret_id_ttl")
			s.SecretIDTTL.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleReadSecretIdTtlResponse = [1]string{
	0: "secret_id_ttl",
}

// Decode decodes AppRoleReadSecretIdTtlResponse from json.
func (s *AppRoleReadSecretIdTtlResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadSecretIdTtlResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "secret_id_ttl":
			if err := func() error {
				s.SecretIDTTL.Reset()
				if err := s.SecretIDTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_ttl\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadSecretIdTtlResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadSecretIdTtlResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadSecretIdTtlResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadTokenBoundCidrsResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadTokenBoundCidrsResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TokenBoundCidrs != nil {
			e.FieldStart("token_bound_cidrs")
			e.ArrStart()
			for _, elem := range s.TokenBoundCidrs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAppRoleReadTokenBoundCidrsResponse = [1]string{
	0: "token_bound_cidrs",
}

// Decode decodes AppRoleReadTokenBoundCidrsResponse from json.
func (s *AppRoleReadTokenBoundCidrsResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadTokenBoundCidrsResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token_bound_cidrs":
			if err := func() error {
				s.TokenBoundCidrs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TokenBoundCidrs = append(s.TokenBoundCidrs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_bound_cidrs\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadTokenBoundCidrsResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadTokenBoundCidrsResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadTokenBoundCidrsResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadTokenMaxTtlResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadTokenMaxTtlResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TokenMaxTTL.Set {
			e.FieldStart("token_max_ttl")
			s.TokenMaxTTL.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleReadTokenMaxTtlResponse = [1]string{
	0: "token_max_ttl",
}

// Decode decodes AppRoleReadTokenMaxTtlResponse from json.
func (s *AppRoleReadTokenMaxTtlResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadTokenMaxTtlResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token_max_ttl":
			if err := func() error {
				s.TokenMaxTTL.Reset()
				if err := s.TokenMaxTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_max_ttl\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadTokenMaxTtlResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadTokenMaxTtlResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadTokenMaxTtlResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadTokenNumUsesResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadTokenNumUsesResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TokenNumUses.Set {
			e.FieldStart("token_num_uses")
			s.TokenNumUses.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleReadTokenNumUsesResponse = [1]string{
	0: "token_num_uses",
}

// Decode decodes AppRoleReadTokenNumUsesResponse from json.
func (s *AppRoleReadTokenNumUsesResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadTokenNumUsesResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token_num_uses":
			if err := func() error {
				s.TokenNumUses.Reset()
				if err := s.TokenNumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_num_uses\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadTokenNumUsesResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadTokenNumUsesResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadTokenNumUsesResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleReadTokenTtlResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleReadTokenTtlResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TokenTTL.Set {
			e.FieldStart("token_ttl")
			s.TokenTTL.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleReadTokenTtlResponse = [1]string{
	0: "token_ttl",
}

// Decode decodes AppRoleReadTokenTtlResponse from json.
func (s *AppRoleReadTokenTtlResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleReadTokenTtlResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token_ttl":
			if err := func() error {
				s.TokenTTL.Reset()
				if err := s.TokenTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_ttl\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleReadTokenTtlResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleReadTokenTtlResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleReadTokenTtlResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteBindSecretIdRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteBindSecretIdRequest) encodeFields(e *jx.Encoder) {
	{
		if s.BindSecretID.Set {
			e.FieldStart("bind_secret_id")
			s.BindSecretID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWriteBindSecretIdRequest = [1]string{
	0: "bind_secret_id",
}

// Decode decodes AppRoleWriteBindSecretIdRequest from json.
func (s *AppRoleWriteBindSecretIdRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteBindSecretIdRequest to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bind_secret_id":
			if err := func() error {
				s.BindSecretID.Reset()
				if err := s.BindSecretID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bind_secret_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteBindSecretIdRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteBindSecretIdRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteBindSecretIdRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteBoundCidrListRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteBoundCidrListRequest) encodeFields(e *jx.Encoder) {
	{
		if s.BoundCidrList != nil {
			e.FieldStart("bound_cidr_list")
			e.ArrStart()
			for _, elem := range s.BoundCidrList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAppRoleWriteBoundCidrListRequest = [1]string{
	0: "bound_cidr_list",
}

// Decode decodes AppRoleWriteBoundCidrListRequest from json.
func (s *AppRoleWriteBoundCidrListRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteBoundCidrListRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bound_cidr_list":
			if err := func() error {
				s.BoundCidrList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.BoundCidrList = append(s.BoundCidrList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bound_cidr_list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteBoundCidrListRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteBoundCidrListRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteBoundCidrListRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteCustomSecretIdRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteCustomSecretIdRequest) encodeFields(e *jx.Encoder) {
	{
		if s.CidrList != nil {
			e.FieldStart("cidr_list")
			e.ArrStart()
			for _, elem := range s.CidrList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Metadata.Set {
			e.FieldStart("metadata")
			s.Metadata.Encode(e)
		}
	}
	{
		if s.NumUses.Set {
			e.FieldStart("num_uses")
			s.NumUses.Encode(e)
		}
	}
	{
		if s.SecretID.Set {
			e.FieldStart("secret_id")
			s.SecretID.Encode(e)
		}
	}
	{
		if s.TokenBoundCidrs != nil {
			e.FieldStart("token_bound_cidrs")
			e.ArrStart()
			for _, elem := range s.TokenBoundCidrs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TTL.Set {
			e.FieldStart("ttl")
			s.TTL.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWriteCustomSecretIdRequest = [6]string{
	0: "cidr_list",
	1: "metadata",
	2: "num_uses",
	3: "secret_id",
	4: "token_bound_cidrs",
	5: "ttl",
}

// Decode decodes AppRoleWriteCustomSecretIdRequest from json.
func (s *AppRoleWriteCustomSecretIdRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteCustomSecretIdRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cidr_list":
			if err := func() error {
				s.CidrList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CidrList = append(s.CidrList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cidr_list\"")
			}
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metadata\"")
			}
		case "num_uses":
			if err := func() error {
				s.NumUses.Reset()
				if err := s.NumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"num_uses\"")
			}
		case "secret_id":
			if err := func() error {
				s.SecretID.Reset()
				if err := s.SecretID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id\"")
			}
		case "token_bound_cidrs":
			if err := func() error {
				s.TokenBoundCidrs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TokenBoundCidrs = append(s.TokenBoundCidrs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_bound_cidrs\"")
			}
		case "ttl":
			if err := func() error {
				s.TTL.Reset()
				if err := s.TTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ttl\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteCustomSecretIdRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteCustomSecretIdRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteCustomSecretIdRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteCustomSecretIdResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteCustomSecretIdResponse) encodeFields(e *jx.Encoder) {
	{
		if s.SecretID.Set {
			e.FieldStart("secret_id")
			s.SecretID.Encode(e)
		}
	}
	{
		if s.SecretIDAccessor.Set {
			e.FieldStart("secret_id_accessor")
			s.SecretIDAccessor.Encode(e)
		}
	}
	{
		if s.SecretIDNumUses.Set {
			e.FieldStart("secret_id_num_uses")
			s.SecretIDNumUses.Encode(e)
		}
	}
	{
		if s.SecretIDTTL.Set {
			e.FieldStart("secret_id_ttl")
			s.SecretIDTTL.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWriteCustomSecretIdResponse = [4]string{
	0: "secret_id",
	1: "secret_id_accessor",
	2: "secret_id_num_uses",
	3: "secret_id_ttl",
}

// Decode decodes AppRoleWriteCustomSecretIdResponse from json.
func (s *AppRoleWriteCustomSecretIdResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteCustomSecretIdResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "secret_id":
			if err := func() error {
				s.SecretID.Reset()
				if err := s.SecretID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id\"")
			}
		case "secret_id_accessor":
			if err := func() error {
				s.SecretIDAccessor.Reset()
				if err := s.SecretIDAccessor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_accessor\"")
			}
		case "secret_id_num_uses":
			if err := func() error {
				s.SecretIDNumUses.Reset()
				if err := s.SecretIDNumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_num_uses\"")
			}
		case "secret_id_ttl":
			if err := func() error {
				s.SecretIDTTL.Reset()
				if err := s.SecretIDTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_ttl\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteCustomSecretIdResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteCustomSecretIdResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteCustomSecretIdResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWritePeriodRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWritePeriodRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Period.Set {
			e.FieldStart("period")
			s.Period.Encode(e)
		}
	}
	{
		if s.TokenPeriod.Set {
			e.FieldStart("token_period")
			s.TokenPeriod.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWritePeriodRequest = [2]string{
	0: "period",
	1: "token_period",
}

// Decode decodes AppRoleWritePeriodRequest from json.
func (s *AppRoleWritePeriodRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWritePeriodRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "period":
			if err := func() error {
				s.Period.Reset()
				if err := s.Period.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"period\"")
			}
		case "token_period":
			if err := func() error {
				s.TokenPeriod.Reset()
				if err := s.TokenPeriod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_period\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWritePeriodRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWritePeriodRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWritePeriodRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWritePoliciesRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWritePoliciesRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Policies != nil {
			e.FieldStart("policies")
			e.ArrStart()
			for _, elem := range s.Policies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TokenPolicies != nil {
			e.FieldStart("token_policies")
			e.ArrStart()
			for _, elem := range s.TokenPolicies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAppRoleWritePoliciesRequest = [2]string{
	0: "policies",
	1: "token_policies",
}

// Decode decodes AppRoleWritePoliciesRequest from json.
func (s *AppRoleWritePoliciesRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWritePoliciesRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "policies":
			if err := func() error {
				s.Policies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Policies = append(s.Policies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policies\"")
			}
		case "token_policies":
			if err := func() error {
				s.TokenPolicies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TokenPolicies = append(s.TokenPolicies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_policies\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWritePoliciesRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWritePoliciesRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWritePoliciesRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteRoleIdRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteRoleIdRequest) encodeFields(e *jx.Encoder) {
	{
		if s.RoleID.Set {
			e.FieldStart("role_id")
			s.RoleID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWriteRoleIdRequest = [1]string{
	0: "role_id",
}

// Decode decodes AppRoleWriteRoleIdRequest from json.
func (s *AppRoleWriteRoleIdRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteRoleIdRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "role_id":
			if err := func() error {
				s.RoleID.Reset()
				if err := s.RoleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteRoleIdRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteRoleIdRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteRoleIdRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteRoleRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteRoleRequest) encodeFields(e *jx.Encoder) {
	{
		if s.BindSecretID.Set {
			e.FieldStart("bind_secret_id")
			s.BindSecretID.Encode(e)
		}
	}
	{
		if s.BoundCidrList != nil {
			e.FieldStart("bound_cidr_list")
			e.ArrStart()
			for _, elem := range s.BoundCidrList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.LocalSecretIds.Set {
			e.FieldStart("local_secret_ids")
			s.LocalSecretIds.Encode(e)
		}
	}
	{
		if s.Period.Set {
			e.FieldStart("period")
			s.Period.Encode(e)
		}
	}
	{
		if s.Policies != nil {
			e.FieldStart("policies")
			e.ArrStart()
			for _, elem := range s.Policies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RoleID.Set {
			e.FieldStart("role_id")
			s.RoleID.Encode(e)
		}
	}
	{
		if s.SecretIDBoundCidrs != nil {
			e.FieldStart("secret_id_bound_cidrs")
			e.ArrStart()
			for _, elem := range s.SecretIDBoundCidrs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SecretIDNumUses.Set {
			e.FieldStart("secret_id_num_uses")
			s.SecretIDNumUses.Encode(e)
		}
	}
	{
		if s.SecretIDTTL.Set {
			e.FieldStart("secret_id_ttl")
			s.SecretIDTTL.Encode(e)
		}
	}
	{
		if s.TokenBoundCidrs != nil {
			e.FieldStart("token_bound_cidrs")
			e.ArrStart()
			for _, elem := range s.TokenBoundCidrs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TokenExplicitMaxTTL.Set {
			e.FieldStart("token_explicit_max_ttl")
			s.TokenExplicitMaxTTL.Encode(e)
		}
	}
	{
		if s.TokenMaxTTL.Set {
			e.FieldStart("token_max_ttl")
			s.TokenMaxTTL.Encode(e)
		}
	}
	{
		if s.TokenNoDefaultPolicy.Set {
			e.FieldStart("token_no_default_policy")
			s.TokenNoDefaultPolicy.Encode(e)
		}
	}
	{
		if s.TokenNumUses.Set {
			e.FieldStart("token_num_uses")
			s.TokenNumUses.Encode(e)
		}
	}
	{
		if s.TokenPeriod.Set {
			e.FieldStart("token_period")
			s.TokenPeriod.Encode(e)
		}
	}
	{
		if s.TokenPolicies != nil {
			e.FieldStart("token_policies")
			e.ArrStart()
			for _, elem := range s.TokenPolicies {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TokenTTL.Set {
			e.FieldStart("token_ttl")
			s.TokenTTL.Encode(e)
		}
	}
	{
		if s.TokenType.Set {
			e.FieldStart("token_type")
			s.TokenType.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWriteRoleRequest = [18]string{
	0:  "bind_secret_id",
	1:  "bound_cidr_list",
	2:  "local_secret_ids",
	3:  "period",
	4:  "policies",
	5:  "role_id",
	6:  "secret_id_bound_cidrs",
	7:  "secret_id_num_uses",
	8:  "secret_id_ttl",
	9:  "token_bound_cidrs",
	10: "token_explicit_max_ttl",
	11: "token_max_ttl",
	12: "token_no_default_policy",
	13: "token_num_uses",
	14: "token_period",
	15: "token_policies",
	16: "token_ttl",
	17: "token_type",
}

// Decode decodes AppRoleWriteRoleRequest from json.
func (s *AppRoleWriteRoleRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteRoleRequest to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bind_secret_id":
			if err := func() error {
				s.BindSecretID.Reset()
				if err := s.BindSecretID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bind_secret_id\"")
			}
		case "bound_cidr_list":
			if err := func() error {
				s.BoundCidrList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.BoundCidrList = append(s.BoundCidrList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bound_cidr_list\"")
			}
		case "local_secret_ids":
			if err := func() error {
				s.LocalSecretIds.Reset()
				if err := s.LocalSecretIds.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"local_secret_ids\"")
			}
		case "period":
			if err := func() error {
				s.Period.Reset()
				if err := s.Period.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"period\"")
			}
		case "policies":
			if err := func() error {
				s.Policies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Policies = append(s.Policies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policies\"")
			}
		case "role_id":
			if err := func() error {
				s.RoleID.Reset()
				if err := s.RoleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role_id\"")
			}
		case "secret_id_bound_cidrs":
			if err := func() error {
				s.SecretIDBoundCidrs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.SecretIDBoundCidrs = append(s.SecretIDBoundCidrs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_bound_cidrs\"")
			}
		case "secret_id_num_uses":
			if err := func() error {
				s.SecretIDNumUses.Reset()
				if err := s.SecretIDNumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_num_uses\"")
			}
		case "secret_id_ttl":
			if err := func() error {
				s.SecretIDTTL.Reset()
				if err := s.SecretIDTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_ttl\"")
			}
		case "token_bound_cidrs":
			if err := func() error {
				s.TokenBoundCidrs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TokenBoundCidrs = append(s.TokenBoundCidrs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_bound_cidrs\"")
			}
		case "token_explicit_max_ttl":
			if err := func() error {
				s.TokenExplicitMaxTTL.Reset()
				if err := s.TokenExplicitMaxTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_explicit_max_ttl\"")
			}
		case "token_max_ttl":
			if err := func() error {
				s.TokenMaxTTL.Reset()
				if err := s.TokenMaxTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_max_ttl\"")
			}
		case "token_no_default_policy":
			if err := func() error {
				s.TokenNoDefaultPolicy.Reset()
				if err := s.TokenNoDefaultPolicy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_no_default_policy\"")
			}
		case "token_num_uses":
			if err := func() error {
				s.TokenNumUses.Reset()
				if err := s.TokenNumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_num_uses\"")
			}
		case "token_period":
			if err := func() error {
				s.TokenPeriod.Reset()
				if err := s.TokenPeriod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_period\"")
			}
		case "token_policies":
			if err := func() error {
				s.TokenPolicies = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TokenPolicies = append(s.TokenPolicies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_policies\"")
			}
		case "token_ttl":
			if err := func() error {
				s.TokenTTL.Reset()
				if err := s.TokenTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_ttl\"")
			}
		case "token_type":
			if err := func() error {
				s.TokenType.Reset()
				if err := s.TokenType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteRoleRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteRoleRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteRoleRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteSecretIdBoundCidrsRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteSecretIdBoundCidrsRequest) encodeFields(e *jx.Encoder) {
	{
		if s.SecretIDBoundCidrs != nil {
			e.FieldStart("secret_id_bound_cidrs")
			e.ArrStart()
			for _, elem := range s.SecretIDBoundCidrs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAppRoleWriteSecretIdBoundCidrsRequest = [1]string{
	0: "secret_id_bound_cidrs",
}

// Decode decodes AppRoleWriteSecretIdBoundCidrsRequest from json.
func (s *AppRoleWriteSecretIdBoundCidrsRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteSecretIdBoundCidrsRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "secret_id_bound_cidrs":
			if err := func() error {
				s.SecretIDBoundCidrs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.SecretIDBoundCidrs = append(s.SecretIDBoundCidrs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_bound_cidrs\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteSecretIdBoundCidrsRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteSecretIdBoundCidrsRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteSecretIdBoundCidrsRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteSecretIdNumUsesRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteSecretIdNumUsesRequest) encodeFields(e *jx.Encoder) {
	{
		if s.SecretIDNumUses.Set {
			e.FieldStart("secret_id_num_uses")
			s.SecretIDNumUses.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWriteSecretIdNumUsesRequest = [1]string{
	0: "secret_id_num_uses",
}

// Decode decodes AppRoleWriteSecretIdNumUsesRequest from json.
func (s *AppRoleWriteSecretIdNumUsesRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteSecretIdNumUsesRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "secret_id_num_uses":
			if err := func() error {
				s.SecretIDNumUses.Reset()
				if err := s.SecretIDNumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_num_uses\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteSecretIdNumUsesRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteSecretIdNumUsesRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteSecretIdNumUsesRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteSecretIdRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteSecretIdRequest) encodeFields(e *jx.Encoder) {
	{
		if s.CidrList != nil {
			e.FieldStart("cidr_list")
			e.ArrStart()
			for _, elem := range s.CidrList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Metadata.Set {
			e.FieldStart("metadata")
			s.Metadata.Encode(e)
		}
	}
	{
		if s.NumUses.Set {
			e.FieldStart("num_uses")
			s.NumUses.Encode(e)
		}
	}
	{
		if s.TokenBoundCidrs != nil {
			e.FieldStart("token_bound_cidrs")
			e.ArrStart()
			for _, elem := range s.TokenBoundCidrs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TTL.Set {
			e.FieldStart("ttl")
			s.TTL.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWriteSecretIdRequest = [5]string{
	0: "cidr_list",
	1: "metadata",
	2: "num_uses",
	3: "token_bound_cidrs",
	4: "ttl",
}

// Decode decodes AppRoleWriteSecretIdRequest from json.
func (s *AppRoleWriteSecretIdRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteSecretIdRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cidr_list":
			if err := func() error {
				s.CidrList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CidrList = append(s.CidrList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cidr_list\"")
			}
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metadata\"")
			}
		case "num_uses":
			if err := func() error {
				s.NumUses.Reset()
				if err := s.NumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"num_uses\"")
			}
		case "token_bound_cidrs":
			if err := func() error {
				s.TokenBoundCidrs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TokenBoundCidrs = append(s.TokenBoundCidrs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_bound_cidrs\"")
			}
		case "ttl":
			if err := func() error {
				s.TTL.Reset()
				if err := s.TTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ttl\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteSecretIdRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteSecretIdRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteSecretIdRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteSecretIdResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteSecretIdResponse) encodeFields(e *jx.Encoder) {
	{
		if s.SecretID.Set {
			e.FieldStart("secret_id")
			s.SecretID.Encode(e)
		}
	}
	{
		if s.SecretIDAccessor.Set {
			e.FieldStart("secret_id_accessor")
			s.SecretIDAccessor.Encode(e)
		}
	}
	{
		if s.SecretIDNumUses.Set {
			e.FieldStart("secret_id_num_uses")
			s.SecretIDNumUses.Encode(e)
		}
	}
	{
		if s.SecretIDTTL.Set {
			e.FieldStart("secret_id_ttl")
			s.SecretIDTTL.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWriteSecretIdResponse = [4]string{
	0: "secret_id",
	1: "secret_id_accessor",
	2: "secret_id_num_uses",
	3: "secret_id_ttl",
}

// Decode decodes AppRoleWriteSecretIdResponse from json.
func (s *AppRoleWriteSecretIdResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteSecretIdResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "secret_id":
			if err := func() error {
				s.SecretID.Reset()
				if err := s.SecretID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id\"")
			}
		case "secret_id_accessor":
			if err := func() error {
				s.SecretIDAccessor.Reset()
				if err := s.SecretIDAccessor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_accessor\"")
			}
		case "secret_id_num_uses":
			if err := func() error {
				s.SecretIDNumUses.Reset()
				if err := s.SecretIDNumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_num_uses\"")
			}
		case "secret_id_ttl":
			if err := func() error {
				s.SecretIDTTL.Reset()
				if err := s.SecretIDTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_ttl\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteSecretIdResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteSecretIdResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteSecretIdResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteSecretIdTtlRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteSecretIdTtlRequest) encodeFields(e *jx.Encoder) {
	{
		if s.SecretIDTTL.Set {
			e.FieldStart("secret_id_ttl")
			s.SecretIDTTL.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWriteSecretIdTtlRequest = [1]string{
	0: "secret_id_ttl",
}

// Decode decodes AppRoleWriteSecretIdTtlRequest from json.
func (s *AppRoleWriteSecretIdTtlRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteSecretIdTtlRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "secret_id_ttl":
			if err := func() error {
				s.SecretIDTTL.Reset()
				if err := s.SecretIDTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secret_id_ttl\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteSecretIdTtlRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteSecretIdTtlRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteSecretIdTtlRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteTokenBoundCidrsRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteTokenBoundCidrsRequest) encodeFields(e *jx.Encoder) {
	{
		if s.TokenBoundCidrs != nil {
			e.FieldStart("token_bound_cidrs")
			e.ArrStart()
			for _, elem := range s.TokenBoundCidrs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAppRoleWriteTokenBoundCidrsRequest = [1]string{
	0: "token_bound_cidrs",
}

// Decode decodes AppRoleWriteTokenBoundCidrsRequest from json.
func (s *AppRoleWriteTokenBoundCidrsRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteTokenBoundCidrsRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token_bound_cidrs":
			if err := func() error {
				s.TokenBoundCidrs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TokenBoundCidrs = append(s.TokenBoundCidrs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_bound_cidrs\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteTokenBoundCidrsRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteTokenBoundCidrsRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteTokenBoundCidrsRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteTokenMaxTtlRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteTokenMaxTtlRequest) encodeFields(e *jx.Encoder) {
	{
		if s.TokenMaxTTL.Set {
			e.FieldStart("token_max_ttl")
			s.TokenMaxTTL.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWriteTokenMaxTtlRequest = [1]string{
	0: "token_max_ttl",
}

// Decode decodes AppRoleWriteTokenMaxTtlRequest from json.
func (s *AppRoleWriteTokenMaxTtlRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteTokenMaxTtlRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token_max_ttl":
			if err := func() error {
				s.TokenMaxTTL.Reset()
				if err := s.TokenMaxTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_max_ttl\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteTokenMaxTtlRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteTokenMaxTtlRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteTokenMaxTtlRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteTokenNumUsesRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteTokenNumUsesRequest) encodeFields(e *jx.Encoder) {
	{
		if s.TokenNumUses.Set {
			e.FieldStart("token_num_uses")
			s.TokenNumUses.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWriteTokenNumUsesRequest = [1]string{
	0: "token_num_uses",
}

// Decode decodes AppRoleWriteTokenNumUsesRequest from json.
func (s *AppRoleWriteTokenNumUsesRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteTokenNumUsesRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token_num_uses":
			if err := func() error {
				s.TokenNumUses.Reset()
				if err := s.TokenNumUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_num_uses\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteTokenNumUsesRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteTokenNumUsesRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteTokenNumUsesRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AppRoleWriteTokenTtlRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AppRoleWriteTokenTtlRequest) encodeFields(e *jx.Encoder) {
	{
		if s.TokenTTL.Set {
			e.FieldStart("token_ttl")
			s.TokenTTL.Encode(e)
		}
	}
}

var jsonFieldsNameOfAppRoleWriteTokenTtlRequest = [1]string{
	0: "token_ttl",
}

// Decode decodes AppRoleWriteTokenTtlRequest from json.
func (s *AppRoleWriteTokenTtlRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AppRoleWriteTokenTtlRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token_ttl":
			if err := func() error {
				s.TokenTTL.Reset()
				if err := s.TokenTTL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token_ttl\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AppRoleWriteTokenTtlRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AppRoleWriteTokenTtlRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AppRoleWriteTokenTtlRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KvV2ConfigureRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KvV2ConfigureRequest) encodeFields(e *jx.Encoder) {
	{
		if s.CasRequired.Set {
			e.FieldStart("cas_required")
			s.CasRequired.Encode(e)
		}
	}
	{
		if s.DeleteVersionAfter.Set {
			e.FieldStart("delete_version_after")
			s.DeleteVersionAfter.Encode(e)
		}
	}
	{
		if s.MaxVersions.Set {
			e.FieldStart("max_versions")
			s.MaxVersions.Encode(e)
		}
	}
}

var jsonFieldsNameOfKvV2ConfigureRequest = [3]string{
	0: "cas_required",
	1: "delete_version_after",
	2: "max_versions",
}

// Decode decodes KvV2ConfigureRequest from json.
func (s *KvV2ConfigureRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2ConfigureRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cas_required":
			if err := func() error {
				s.CasRequired.Reset()
				if err := s.CasRequired.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cas_required\"")
			}
		case "delete_version_after":
			if err := func() error {
				s.DeleteVersionAfter.Reset()
				if err := s.DeleteVersionAfter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_version_after\"")
			}
		case "max_versions":
			if err := func() error {
				s.MaxVersions.Reset()
				if err := s.MaxVersions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_versions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2ConfigureRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KvV2ConfigureRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2ConfigureRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KvV2DeleteVersionsRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KvV2DeleteVersionsRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Versions != nil {
			e.FieldStart("versions")
			e.ArrStart()
			for _, elem := range s.Versions {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfKvV2DeleteVersionsRequest = [1]string{
	0: "versions",
}

// Decode decodes KvV2DeleteVersionsRequest from json.
func (s *KvV2DeleteVersionsRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2DeleteVersionsRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "versions":
			if err := func() error {
				s.Versions = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.Versions = append(s.Versions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"versions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2DeleteVersionsRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KvV2DeleteVersionsRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2DeleteVersionsRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KvV2DestroyVersionsRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KvV2DestroyVersionsRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Versions != nil {
			e.FieldStart("versions")
			e.ArrStart()
			for _, elem := range s.Versions {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfKvV2DestroyVersionsRequest = [1]string{
	0: "versions",
}

// Decode decodes KvV2DestroyVersionsRequest from json.
func (s *KvV2DestroyVersionsRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2DestroyVersionsRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "versions":
			if err := func() error {
				s.Versions = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.Versions = append(s.Versions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"versions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2DestroyVersionsRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KvV2DestroyVersionsRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2DestroyVersionsRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KvV2ReadConfigurationResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KvV2ReadConfigurationResponse) encodeFields(e *jx.Encoder) {
	{
		if s.CasRequired.Set {
			e.FieldStart("cas_required")
			s.CasRequired.Encode(e)
		}
	}
	{
		if s.DeleteVersionAfter.Set {
			e.FieldStart("delete_version_after")
			s.DeleteVersionAfter.Encode(e)
		}
	}
	{
		if s.MaxVersions.Set {
			e.FieldStart("max_versions")
			s.MaxVersions.Encode(e)
		}
	}
}

var jsonFieldsNameOfKvV2ReadConfigurationResponse = [3]string{
	0: "cas_required",
	1: "delete_version_after",
	2: "max_versions",
}

// Decode decodes KvV2ReadConfigurationResponse from json.
func (s *KvV2ReadConfigurationResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2ReadConfigurationResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cas_required":
			if err := func() error {
				s.CasRequired.Reset()
				if err := s.CasRequired.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cas_required\"")
			}
		case "delete_version_after":
			if err := func() error {
				s.DeleteVersionAfter.Reset()
				if err := s.DeleteVersionAfter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_version_after\"")
			}
		case "max_versions":
			if err := func() error {
				s.MaxVersions.Reset()
				if err := s.MaxVersions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_versions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2ReadConfigurationResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KvV2ReadConfigurationResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2ReadConfigurationResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KvV2ReadMetadataResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KvV2ReadMetadataResponse) encodeFields(e *jx.Encoder) {
	{
		if s.CasRequired.Set {
			e.FieldStart("cas_required")
			s.CasRequired.Encode(e)
		}
	}
	{
		if s.CreatedTime.Set {
			e.FieldStart("created_time")
			s.CreatedTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.CurrentVersion.Set {
			e.FieldStart("current_version")
			s.CurrentVersion.Encode(e)
		}
	}
	{
		if s.CustomMetadata.Set {
			e.FieldStart("custom_metadata")
			s.CustomMetadata.Encode(e)
		}
	}
	{
		if s.DeleteVersionAfter.Set {
			e.FieldStart("delete_version_after")
			s.DeleteVersionAfter.Encode(e)
		}
	}
	{
		if s.MaxVersions.Set {
			e.FieldStart("max_versions")
			s.MaxVersions.Encode(e)
		}
	}
	{
		if s.OldestVersion.Set {
			e.FieldStart("oldest_version")
			s.OldestVersion.Encode(e)
		}
	}
	{
		if s.UpdatedTime.Set {
			e.FieldStart("updated_time")
			s.UpdatedTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Versions.Set {
			e.FieldStart("versions")
			s.Versions.Encode(e)
		}
	}
}

var jsonFieldsNameOfKvV2ReadMetadataResponse = [9]string{
	0: "cas_required",
	1: "created_time",
	2: "current_version",
	3: "custom_metadata",
	4: "delete_version_after",
	5: "max_versions",
	6: "oldest_version",
	7: "updated_time",
	8: "versions",
}

// Decode decodes KvV2ReadMetadataResponse from json.
func (s *KvV2ReadMetadataResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2ReadMetadataResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cas_required":
			if err := func() error {
				s.CasRequired.Reset()
				if err := s.CasRequired.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cas_required\"")
			}
		case "created_time":
			if err := func() error {
				s.CreatedTime.Reset()
				if err := s.CreatedTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_time\"")
			}
		case "current_version":
			if err := func() error {
				s.CurrentVersion.Reset()
				if err := s.CurrentVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_version\"")
			}
		case "custom_metadata":
			if err := func() error {
				s.CustomMetadata.Reset()
				if err := s.CustomMetadata.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_metadata\"")
			}
		case "delete_version_after":
			if err := func() error {
				s.DeleteVersionAfter.Reset()
				if err := s.DeleteVersionAfter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_version_after\"")
			}
		case "max_versions":
			if err := func() error {
				s.MaxVersions.Reset()
				if err := s.MaxVersions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_versions\"")
			}
		case "oldest_version":
			if err := func() error {
				s.OldestVersion.Reset()
				if err := s.OldestVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"oldest_version\"")
			}
		case "updated_time":
			if err := func() error {
				s.UpdatedTime.Reset()
				if err := s.UpdatedTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated_time\"")
			}
		case "versions":
			if err := func() error {
				s.Versions.Reset()
				if err := s.Versions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"versions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2ReadMetadataResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KvV2ReadMetadataResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2ReadMetadataResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s KvV2ReadMetadataResponseCustomMetadata) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s KvV2ReadMetadataResponseCustomMetadata) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes KvV2ReadMetadataResponseCustomMetadata from json.
func (s *KvV2ReadMetadataResponseCustomMetadata) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2ReadMetadataResponseCustomMetadata to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2ReadMetadataResponseCustomMetadata")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KvV2ReadMetadataResponseCustomMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2ReadMetadataResponseCustomMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s KvV2ReadMetadataResponseVersions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s KvV2ReadMetadataResponseVersions) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes KvV2ReadMetadataResponseVersions from json.
func (s *KvV2ReadMetadataResponseVersions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2ReadMetadataResponseVersions to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2ReadMetadataResponseVersions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KvV2ReadMetadataResponseVersions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2ReadMetadataResponseVersions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KvV2ReadResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KvV2ReadResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Data.Set {
			e.FieldStart("data")
			s.Data.Encode(e)
		}
	}
	{
		if s.Metadata.Set {
			e.FieldStart("metadata")
			s.Metadata.Encode(e)
		}
	}
}

var jsonFieldsNameOfKvV2ReadResponse = [2]string{
	0: "data",
	1: "metadata",
}

// Decode decodes KvV2ReadResponse from json.
func (s *KvV2ReadResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2ReadResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "data":
			if err := func() error {
				s.Data.Reset()
				if err := s.Data.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metadata\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2ReadResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KvV2ReadResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2ReadResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s KvV2ReadResponseData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s KvV2ReadResponseData) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes KvV2ReadResponseData from json.
func (s *KvV2ReadResponseData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2ReadResponseData to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2ReadResponseData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KvV2ReadResponseData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2ReadResponseData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s KvV2ReadResponseMetadata) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s KvV2ReadResponseMetadata) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes KvV2ReadResponseMetadata from json.
func (s *KvV2ReadResponseMetadata) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2ReadResponseMetadata to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2ReadResponseMetadata")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KvV2ReadResponseMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2ReadResponseMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KvV2ReadSubkeysResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KvV2ReadSubkeysResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Metadata.Set {
			e.FieldStart("metadata")
			s.Metadata.Encode(e)
		}
	}
	{
		if s.Subkeys.Set {
			e.FieldStart("subkeys")
			s.Subkeys.Encode(e)
		}
	}
}

var jsonFieldsNameOfKvV2ReadSubkeysResponse = [2]string{
	0: "metadata",
	1: "subkeys",
}

// Decode decodes KvV2ReadSubkeysResponse from json.
func (s *KvV2ReadSubkeysResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2ReadSubkeysResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"metadata\"")
			}
		case "subkeys":
			if err := func() error {
				s.Subkeys.Reset()
				if err := s.Subkeys.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subkeys\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2ReadSubkeysResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KvV2ReadSubkeysResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2ReadSubkeysResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s KvV2ReadSubkeysResponseMetadata) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s KvV2ReadSubkeysResponseMetadata) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes KvV2ReadSubkeysResponseMetadata from json.
func (s *KvV2ReadSubkeysResponseMetadata) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2ReadSubkeysResponseMetadata to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2ReadSubkeysResponseMetadata")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KvV2ReadSubkeysResponseMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2ReadSubkeysResponseMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s KvV2ReadSubkeysResponseSubkeys) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s KvV2ReadSubkeysResponseSubkeys) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes KvV2ReadSubkeysResponseSubkeys from json.
func (s *KvV2ReadSubkeysResponseSubkeys) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2ReadSubkeysResponseSubkeys to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2ReadSubkeysResponseSubkeys")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KvV2ReadSubkeysResponseSubkeys) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2ReadSubkeysResponseSubkeys) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KvV2UndeleteVersionsRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KvV2UndeleteVersionsRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Versions != nil {
			e.FieldStart("versions")
			e.ArrStart()
			for _, elem := range s.Versions {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfKvV2UndeleteVersionsRequest = [1]string{
	0: "versions",
}

// Decode decodes KvV2UndeleteVersionsRequest from json.
func (s *KvV2UndeleteVersionsRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2UndeleteVersionsRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "versions":
			if err := func() error {
				s.Versions = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.Versions = append(s.Versions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"versions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2UndeleteVersionsRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KvV2UndeleteVersionsRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2UndeleteVersionsRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KvV2WriteMetadataRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KvV2WriteMetadataRequest) encodeFields(e *jx.Encoder) {
	{
		if s.CasRequired.Set {
			e.FieldStart("cas_required")
			s.CasRequired.Encode(e)
		}
	}
	{
		if s.CustomMetadata.Set {
			e.FieldStart("custom_metadata")
			s.CustomMetadata.Encode(e)
		}
	}
	{
		if s.DeleteVersionAfter.Set {
			e.FieldStart("delete_version_after")
			s.DeleteVersionAfter.Encode(e)
		}
	}
	{
		if s.MaxVersions.Set {
			e.FieldStart("max_versions")
			s.MaxVersions.Encode(e)
		}
	}
}

var jsonFieldsNameOfKvV2WriteMetadataRequest = [4]string{
	0: "cas_required",
	1: "custom_metadata",
	2: "delete_version_after",
	3: "max_versions",
}

// Decode decodes KvV2WriteMetadataRequest from json.
func (s *KvV2WriteMetadataRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2WriteMetadataRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cas_required":
			if err := func() error {
				s.CasRequired.Reset()
				if err := s.CasRequired.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cas_required\"")
			}
		case "custom_metadata":
			if err := func() error {
				s.CustomMetadata.Reset()
				if err := s.CustomMetadata.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_metadata\"")
			}
		case "delete_version_after":
			if err := func() error {
				s.DeleteVersionAfter.Reset()
				if err := s.DeleteVersionAfter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_version_after\"")
			}
		case "max_versions":
			if err := func() error {
				s.MaxVersions.Reset()
				if err := s.MaxVersions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_versions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2WriteMetadataRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KvV2WriteMetadataRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2WriteMetadataRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s KvV2WriteMetadataRequestCustomMetadata) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s KvV2WriteMetadataRequestCustomMetadata) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes KvV2WriteMetadataRequestCustomMetadata from json.
func (s *KvV2WriteMetadataRequestCustomMetadata) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2WriteMetadataRequestCustomMetadata to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2WriteMetadataRequestCustomMetadata")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KvV2WriteMetadataRequestCustomMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2WriteMetadataRequestCustomMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KvV2WriteRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KvV2WriteRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Data.Set {
			e.FieldStart("data")
			s.Data.Encode(e)
		}
	}
	{
		if s.Options.Set {
			e.FieldStart("options")
			s.Options.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
}

var jsonFieldsNameOfKvV2WriteRequest = [3]string{
	0: "data",
	1: "options",
	2: "version",
}

// Decode decodes KvV2WriteRequest from json.
func (s *KvV2WriteRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2WriteRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "data":
			if err := func() error {
				s.Data.Reset()
				if err := s.Data.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		case "options":
			if err := func() error {
				s.Options.Reset()
				if err := s.Options.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"options\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2WriteRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KvV2WriteRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2WriteRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s KvV2WriteRequestData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s KvV2WriteRequestData) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes KvV2WriteRequestData from json.
func (s *KvV2WriteRequestData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2WriteRequestData to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2WriteRequestData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KvV2WriteRequestData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2WriteRequestData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s KvV2WriteRequestOptions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s KvV2WriteRequestOptions) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes KvV2WriteRequestOptions from json.
func (s *KvV2WriteRequestOptions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2WriteRequestOptions to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2WriteRequestOptions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KvV2WriteRequestOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2WriteRequestOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KvV2WriteResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KvV2WriteResponse) encodeFields(e *jx.Encoder) {
	{
		if s.CreatedTime.Set {
			e.FieldStart("created_time")
			s.CreatedTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.CustomMetadata.Set {
			e.FieldStart("custom_metadata")
			s.CustomMetadata.Encode(e)
		}
	}
	{
		if s.DeletionTime.Set {
			e.FieldStart("deletion_time")
			s.DeletionTime.Encode(e)
		}
	}
	{
		if s.Destroyed.Set {
			e.FieldStart("destroyed")
			s.Destroyed.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
}

var jsonFieldsNameOfKvV2WriteResponse = [5]string{
	0: "created_time",
	1: "custom_metadata",
	2: "deletion_time",
	3: "destroyed",
	4: "version",
}

// Decode decodes KvV2WriteResponse from json.
func (s *KvV2WriteResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2WriteResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "created_time":
			if err := func() error {
				s.CreatedTime.Reset()
				if err := s.CreatedTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_time\"")
			}
		case "custom_metadata":
			if err := func() error {
				s.CustomMetadata.Reset()
				if err := s.CustomMetadata.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_metadata\"")
			}
		case "deletion_time":
			if err := func() error {
				s.DeletionTime.Reset()
				if err := s.DeletionTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deletion_time\"")
			}
		case "destroyed":
			if err := func() error {
				s.Destroyed.Reset()
				if err := s.Destroyed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"destroyed\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2WriteResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KvV2WriteResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2WriteResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s KvV2WriteResponseCustomMetadata) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s KvV2WriteResponseCustomMetadata) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes KvV2WriteResponseCustomMetadata from json.
func (s *KvV2WriteResponseCustomMetadata) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KvV2WriteResponseCustomMetadata to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KvV2WriteResponseCustomMetadata")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KvV2WriteResponseCustomMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KvV2WriteResponseCustomMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AppRoleLookUpSecretIdByAccessorResponseMetadata as json.
func (o OptAppRoleLookUpSecretIdByAccessorResponseMetadata) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AppRoleLookUpSecretIdByAccessorResponseMetadata from json.
func (o *OptAppRoleLookUpSecretIdByAccessorResponseMetadata) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAppRoleLookUpSecretIdByAccessorResponseMetadata to nil")
	}
	o.Set = true
	o.Value = make(AppRoleLookUpSecretIdByAccessorResponseMetadata)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAppRoleLookUpSecretIdByAccessorResponseMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAppRoleLookUpSecretIdByAccessorResponseMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AppRoleLookUpSecretIdResponseMetadata as json.
func (o OptAppRoleLookUpSecretIdResponseMetadata) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AppRoleLookUpSecretIdResponseMetadata from json.
func (o *OptAppRoleLookUpSecretIdResponseMetadata) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAppRoleLookUpSecretIdResponseMetadata to nil")
	}
	o.Set = true
	o.Value = make(AppRoleLookUpSecretIdResponseMetadata)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAppRoleLookUpSecretIdResponseMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAppRoleLookUpSecretIdResponseMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDateTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes time.Duration as json.
func (o OptDuration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeDuration(e, o.Value)
}

// Decode decodes time.Duration from json.
func (o *OptDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDuration to nil")
	}
	o.Set = true
	v, err := json.DecodeDuration(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt64 to nil")
	}
	o.Set = true
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KvV2ReadMetadataResponseCustomMetadata as json.
func (o OptKvV2ReadMetadataResponseCustomMetadata) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes KvV2ReadMetadataResponseCustomMetadata from json.
func (o *OptKvV2ReadMetadataResponseCustomMetadata) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKvV2ReadMetadataResponseCustomMetadata to nil")
	}
	o.Set = true
	o.Value = make(KvV2ReadMetadataResponseCustomMetadata)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKvV2ReadMetadataResponseCustomMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKvV2ReadMetadataResponseCustomMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KvV2ReadMetadataResponseVersions as json.
func (o OptKvV2ReadMetadataResponseVersions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes KvV2ReadMetadataResponseVersions from json.
func (o *OptKvV2ReadMetadataResponseVersions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKvV2ReadMetadataResponseVersions to nil")
	}
	o.Set = true
	o.Value = make(KvV2ReadMetadataResponseVersions)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKvV2ReadMetadataResponseVersions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKvV2ReadMetadataResponseVersions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KvV2ReadResponseData as json.
func (o OptKvV2ReadResponseData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes KvV2ReadResponseData from json.
func (o *OptKvV2ReadResponseData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKvV2ReadResponseData to nil")
	}
	o.Set = true
	o.Value = make(KvV2ReadResponseData)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKvV2ReadResponseData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKvV2ReadResponseData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KvV2ReadResponseMetadata as json.
func (o OptKvV2ReadResponseMetadata) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes KvV2ReadResponseMetadata from json.
func (o *OptKvV2ReadResponseMetadata) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKvV2ReadResponseMetadata to nil")
	}
	o.Set = true
	o.Value = make(KvV2ReadResponseMetadata)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKvV2ReadResponseMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKvV2ReadResponseMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KvV2ReadSubkeysResponseMetadata as json.
func (o OptKvV2ReadSubkeysResponseMetadata) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes KvV2ReadSubkeysResponseMetadata from json.
func (o *OptKvV2ReadSubkeysResponseMetadata) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKvV2ReadSubkeysResponseMetadata to nil")
	}
	o.Set = true
	o.Value = make(KvV2ReadSubkeysResponseMetadata)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKvV2ReadSubkeysResponseMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKvV2ReadSubkeysResponseMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KvV2ReadSubkeysResponseSubkeys as json.
func (o OptKvV2ReadSubkeysResponseSubkeys) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes KvV2ReadSubkeysResponseSubkeys from json.
func (o *OptKvV2ReadSubkeysResponseSubkeys) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKvV2ReadSubkeysResponseSubkeys to nil")
	}
	o.Set = true
	o.Value = make(KvV2ReadSubkeysResponseSubkeys)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKvV2ReadSubkeysResponseSubkeys) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKvV2ReadSubkeysResponseSubkeys) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KvV2WriteMetadataRequestCustomMetadata as json.
func (o OptKvV2WriteMetadataRequestCustomMetadata) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes KvV2WriteMetadataRequestCustomMetadata from json.
func (o *OptKvV2WriteMetadataRequestCustomMetadata) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKvV2WriteMetadataRequestCustomMetadata to nil")
	}
	o.Set = true
	o.Value = make(KvV2WriteMetadataRequestCustomMetadata)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKvV2WriteMetadataRequestCustomMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKvV2WriteMetadataRequestCustomMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KvV2WriteRequestData as json.
func (o OptKvV2WriteRequestData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes KvV2WriteRequestData from json.
func (o *OptKvV2WriteRequestData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKvV2WriteRequestData to nil")
	}
	o.Set = true
	o.Value = make(KvV2WriteRequestData)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKvV2WriteRequestData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKvV2WriteRequestData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KvV2WriteRequestOptions as json.
func (o OptKvV2WriteRequestOptions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes KvV2WriteRequestOptions from json.
func (o *OptKvV2WriteRequestOptions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKvV2WriteRequestOptions to nil")
	}
	o.Set = true
	o.Value = make(KvV2WriteRequestOptions)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKvV2WriteRequestOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKvV2WriteRequestOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KvV2WriteResponseCustomMetadata as json.
func (o OptKvV2WriteResponseCustomMetadata) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes KvV2WriteResponseCustomMetadata from json.
func (o *OptKvV2WriteResponseCustomMetadata) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKvV2WriteResponseCustomMetadata to nil")
	}
	o.Set = true
	o.Value = make(KvV2WriteResponseCustomMetadata)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKvV2WriteResponseCustomMetadata) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKvV2WriteResponseCustomMetadata) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *StandardListResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *StandardListResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Keys != nil {
			e.FieldStart("keys")
			e.ArrStart()
			for _, elem := range s.Keys {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfStandardListResponse = [1]string{
	0: "keys",
}

// Decode decodes StandardListResponse from json.
func (s *StandardListResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StandardListResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "keys":
			if err := func() error {
				s.Keys = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Keys = append(s.Keys, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"keys\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode StandardListResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *StandardListResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StandardListResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
