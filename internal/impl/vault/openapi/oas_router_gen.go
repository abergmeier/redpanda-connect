// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "approle_mount_path"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "login"
						origElem := elem
						if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAppRoleLoginRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'r': // Prefix: "role/"
						origElem := elem
						if l := len("role/"); len(elem) >= l && elem[0:l] == "role/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleAppRoleListRolesRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						// Param: "role_name"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleAppRoleDeleteRoleRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleAppRoleReadRoleRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							case "POST":
								s.handleAppRoleWriteRoleRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'b': // Prefix: "b"
								origElem := elem
								if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "ind-secret-id"
									origElem := elem
									if l := len("ind-secret-id"); len(elem) >= l && elem[0:l] == "ind-secret-id" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleAppRoleDeleteBindSecretIDRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleAppRoleReadBindSecretIDRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleAppRoleWriteBindSecretIDRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,POST")
										}

										return
									}

									elem = origElem
								case 'o': // Prefix: "ound-cidr-list"
									origElem := elem
									if l := len("ound-cidr-list"); len(elem) >= l && elem[0:l] == "ound-cidr-list" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleAppRoleDeleteBoundCidrListRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleAppRoleReadBoundCidrListRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleAppRoleWriteBoundCidrListRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'c': // Prefix: "custom-secret-id"
								origElem := elem
								if l := len("custom-secret-id"); len(elem) >= l && elem[0:l] == "custom-secret-id" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleAppRoleWriteCustomSecretIDRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 'l': // Prefix: "local-secret-ids"
								origElem := elem
								if l := len("local-secret-ids"); len(elem) >= l && elem[0:l] == "local-secret-ids" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleAppRoleReadLocalSecretIdsRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'p': // Prefix: "p"
								origElem := elem
								if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "eriod"
									origElem := elem
									if l := len("eriod"); len(elem) >= l && elem[0:l] == "eriod" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleAppRoleDeletePeriodRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleAppRoleReadPeriodRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleAppRoleWritePeriodRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,POST")
										}

										return
									}

									elem = origElem
								case 'o': // Prefix: "olicies"
									origElem := elem
									if l := len("olicies"); len(elem) >= l && elem[0:l] == "olicies" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleAppRoleDeletePoliciesRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleAppRoleReadPoliciesRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleAppRoleWritePoliciesRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'r': // Prefix: "role-id"
								origElem := elem
								if l := len("role-id"); len(elem) >= l && elem[0:l] == "role-id" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleAppRoleReadRoleIDRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleAppRoleWriteRoleIDRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}

								elem = origElem
							case 's': // Prefix: "secret-id"
								origElem := elem
								if l := len("secret-id"); len(elem) >= l && elem[0:l] == "secret-id" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleAppRoleWriteSecretIDRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '-': // Prefix: "-"
									origElem := elem
									if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "accessor/"
										origElem := elem
										if l := len("accessor/"); len(elem) >= l && elem[0:l] == "accessor/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'd': // Prefix: "destroy"
											origElem := elem
											if l := len("destroy"); len(elem) >= l && elem[0:l] == "destroy" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "DELETE":
													s.handleAppRoleDestroySecretIDByAccessor2Request([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												case "POST":
													s.handleAppRoleDestroySecretIDByAccessorRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "DELETE,POST")
												}

												return
											}

											elem = origElem
										case 'l': // Prefix: "lookup"
											origElem := elem
											if l := len("lookup"); len(elem) >= l && elem[0:l] == "lookup" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleAppRoleLookUpSecretIDByAccessorRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

											elem = origElem
										}

										elem = origElem
									case 'b': // Prefix: "bound-cidrs"
										origElem := elem
										if l := len("bound-cidrs"); len(elem) >= l && elem[0:l] == "bound-cidrs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleAppRoleDeleteSecretIDBoundCidrsRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "GET":
												s.handleAppRoleReadSecretIDBoundCidrsRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "POST":
												s.handleAppRoleWriteSecretIDBoundCidrsRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,GET,POST")
											}

											return
										}

										elem = origElem
									case 'n': // Prefix: "num-uses"
										origElem := elem
										if l := len("num-uses"); len(elem) >= l && elem[0:l] == "num-uses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleAppRoleDeleteSecretIDNumUsesRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "GET":
												s.handleAppRoleReadSecretIDNumUsesRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "POST":
												s.handleAppRoleWriteSecretIDNumUsesRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,GET,POST")
											}

											return
										}

										elem = origElem
									case 't': // Prefix: "ttl"
										origElem := elem
										if l := len("ttl"); len(elem) >= l && elem[0:l] == "ttl" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleAppRoleDeleteSecretIDTTLRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "GET":
												s.handleAppRoleReadSecretIDTTLRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "POST":
												s.handleAppRoleWriteSecretIDTTLRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,GET,POST")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleAppRoleListSecretIdsRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'd': // Prefix: "destroy"
										origElem := elem
										if l := len("destroy"); len(elem) >= l && elem[0:l] == "destroy" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleAppRoleDestroySecretId2Request([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "POST":
												s.handleAppRoleDestroySecretIDRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,POST")
											}

											return
										}

										elem = origElem
									case 'l': // Prefix: "lookup"
										origElem := elem
										if l := len("lookup"); len(elem) >= l && elem[0:l] == "lookup" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleAppRoleLookUpSecretIDRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 't': // Prefix: "token-"
								origElem := elem
								if l := len("token-"); len(elem) >= l && elem[0:l] == "token-" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'b': // Prefix: "bound-cidrs"
									origElem := elem
									if l := len("bound-cidrs"); len(elem) >= l && elem[0:l] == "bound-cidrs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleAppRoleDeleteTokenBoundCidrsRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleAppRoleReadTokenBoundCidrsRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleAppRoleWriteTokenBoundCidrsRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,POST")
										}

										return
									}

									elem = origElem
								case 'm': // Prefix: "max-ttl"
									origElem := elem
									if l := len("max-ttl"); len(elem) >= l && elem[0:l] == "max-ttl" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleAppRoleDeleteTokenMaxTTLRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleAppRoleReadTokenMaxTTLRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleAppRoleWriteTokenMaxTTLRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,POST")
										}

										return
									}

									elem = origElem
								case 'n': // Prefix: "num-uses"
									origElem := elem
									if l := len("num-uses"); len(elem) >= l && elem[0:l] == "num-uses" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleAppRoleDeleteTokenNumUsesRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleAppRoleReadTokenNumUsesRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleAppRoleWriteTokenNumUsesRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,POST")
										}

										return
									}

									elem = origElem
								case 't': // Prefix: "ttl"
									origElem := elem
									if l := len("ttl"); len(elem) >= l && elem[0:l] == "ttl" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleAppRoleDeleteTokenTTLRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleAppRoleReadTokenTTLRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleAppRoleWriteTokenTTLRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 't': // Prefix: "tidy/secret-id"
						origElem := elem
						if l := len("tidy/secret-id"); len(elem) >= l && elem[0:l] == "tidy/secret-id" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAppRoleTidySecretIDRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}
			// Param: "kv_v2_mount_path"
			// Match until "/"
			idx := strings.IndexByte(elem, '/')
			if idx < 0 {
				idx = len(elem)
			}
			args[0] = elem[:idx]
			elem = elem[idx:]

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '/': // Prefix: "/"
				origElem := elem
				if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "config"
					origElem := elem
					if l := len("config"); len(elem) >= l && elem[0:l] == "config" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleKvV2ReadConfigurationRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "POST":
							s.handleKvV2ConfigureRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}

					elem = origElem
				case 'd': // Prefix: "d"
					origElem := elem
					if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "ata/"
						origElem := elem
						if l := len("ata/"); len(elem) >= l && elem[0:l] == "ata/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "path"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleKvV2DeleteRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleKvV2ReadRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							case "POST":
								s.handleKvV2WriteRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,POST")
							}

							return
						}

						elem = origElem
					case 'e': // Prefix: "e"
						origElem := elem
						if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "lete/"
							origElem := elem
							if l := len("lete/"); len(elem) >= l && elem[0:l] == "lete/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "path"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleKvV2DeleteVersionsRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 's': // Prefix: "stroy/"
							origElem := elem
							if l := len("stroy/"); len(elem) >= l && elem[0:l] == "stroy/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "path"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleKvV2DestroyVersionsRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'm': // Prefix: "metadata/"
					origElem := elem
					if l := len("metadata/"); len(elem) >= l && elem[0:l] == "metadata/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "path"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[1] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleKvV2DeleteMetadataAndAllVersionsRequest([2]string{
								args[0],
								args[1],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleKvV2ReadMetadataRequest([2]string{
								args[0],
								args[1],
							}, elemIsEscaped, w, r)
						case "POST":
							s.handleKvV2WriteMetadataRequest([2]string{
								args[0],
								args[1],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleKvV2ListRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "subkeys/"
					origElem := elem
					if l := len("subkeys/"); len(elem) >= l && elem[0:l] == "subkeys/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "path"
					// Leaf parameter
					args[1] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleKvV2ReadSubkeysRequest([2]string{
								args[0],
								args[1],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'u': // Prefix: "undelete/"
					origElem := elem
					if l := len("undelete/"); len(elem) >= l && elem[0:l] == "undelete/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "path"
					// Leaf parameter
					args[1] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleKvV2UndeleteVersionsRequest([2]string{
								args[0],
								args[1],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "approle_mount_path"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "login"
						origElem := elem
						if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "AppRoleLogin"
								r.summary = ""
								r.operationID = "app-role-login"
								r.pathPattern = "/auth/{approle_mount_path}/login"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'r': // Prefix: "role/"
						origElem := elem
						if l := len("role/"); len(elem) >= l && elem[0:l] == "role/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "AppRoleListRoles"
								r.summary = ""
								r.operationID = "app-role-list-roles"
								r.pathPattern = "/auth/{approle_mount_path}/role/"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						// Param: "role_name"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "AppRoleDeleteRole"
								r.summary = ""
								r.operationID = "app-role-delete-role"
								r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}"
								r.args = args
								r.count = 2
								return r, true
							case "GET":
								r.name = "AppRoleReadRole"
								r.summary = ""
								r.operationID = "app-role-read-role"
								r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}"
								r.args = args
								r.count = 2
								return r, true
							case "POST":
								r.name = "AppRoleWriteRole"
								r.summary = ""
								r.operationID = "app-role-write-role"
								r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'b': // Prefix: "b"
								origElem := elem
								if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "ind-secret-id"
									origElem := elem
									if l := len("ind-secret-id"); len(elem) >= l && elem[0:l] == "ind-secret-id" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "AppRoleDeleteBindSecretID"
											r.summary = ""
											r.operationID = "app-role-delete-bind-secret-id"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/bind-secret-id"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = "AppRoleReadBindSecretID"
											r.summary = ""
											r.operationID = "app-role-read-bind-secret-id"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/bind-secret-id"
											r.args = args
											r.count = 2
											return r, true
										case "POST":
											r.name = "AppRoleWriteBindSecretID"
											r.summary = ""
											r.operationID = "app-role-write-bind-secret-id"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/bind-secret-id"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'o': // Prefix: "ound-cidr-list"
									origElem := elem
									if l := len("ound-cidr-list"); len(elem) >= l && elem[0:l] == "ound-cidr-list" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "AppRoleDeleteBoundCidrList"
											r.summary = ""
											r.operationID = "app-role-delete-bound-cidr-list"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/bound-cidr-list"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = "AppRoleReadBoundCidrList"
											r.summary = ""
											r.operationID = "app-role-read-bound-cidr-list"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/bound-cidr-list"
											r.args = args
											r.count = 2
											return r, true
										case "POST":
											r.name = "AppRoleWriteBoundCidrList"
											r.summary = ""
											r.operationID = "app-role-write-bound-cidr-list"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/bound-cidr-list"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'c': // Prefix: "custom-secret-id"
								origElem := elem
								if l := len("custom-secret-id"); len(elem) >= l && elem[0:l] == "custom-secret-id" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "AppRoleWriteCustomSecretID"
										r.summary = ""
										r.operationID = "app-role-write-custom-secret-id"
										r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/custom-secret-id"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'l': // Prefix: "local-secret-ids"
								origElem := elem
								if l := len("local-secret-ids"); len(elem) >= l && elem[0:l] == "local-secret-ids" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "AppRoleReadLocalSecretIds"
										r.summary = ""
										r.operationID = "app-role-read-local-secret-ids"
										r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/local-secret-ids"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'p': // Prefix: "p"
								origElem := elem
								if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "eriod"
									origElem := elem
									if l := len("eriod"); len(elem) >= l && elem[0:l] == "eriod" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "AppRoleDeletePeriod"
											r.summary = ""
											r.operationID = "app-role-delete-period"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/period"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = "AppRoleReadPeriod"
											r.summary = ""
											r.operationID = "app-role-read-period"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/period"
											r.args = args
											r.count = 2
											return r, true
										case "POST":
											r.name = "AppRoleWritePeriod"
											r.summary = ""
											r.operationID = "app-role-write-period"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/period"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'o': // Prefix: "olicies"
									origElem := elem
									if l := len("olicies"); len(elem) >= l && elem[0:l] == "olicies" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "AppRoleDeletePolicies"
											r.summary = ""
											r.operationID = "app-role-delete-policies"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/policies"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = "AppRoleReadPolicies"
											r.summary = ""
											r.operationID = "app-role-read-policies"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/policies"
											r.args = args
											r.count = 2
											return r, true
										case "POST":
											r.name = "AppRoleWritePolicies"
											r.summary = ""
											r.operationID = "app-role-write-policies"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/policies"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'r': // Prefix: "role-id"
								origElem := elem
								if l := len("role-id"); len(elem) >= l && elem[0:l] == "role-id" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "AppRoleReadRoleID"
										r.summary = ""
										r.operationID = "app-role-read-role-id"
										r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/role-id"
										r.args = args
										r.count = 2
										return r, true
									case "POST":
										r.name = "AppRoleWriteRoleID"
										r.summary = ""
										r.operationID = "app-role-write-role-id"
										r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/role-id"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 's': // Prefix: "secret-id"
								origElem := elem
								if l := len("secret-id"); len(elem) >= l && elem[0:l] == "secret-id" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "AppRoleWriteSecretID"
										r.summary = ""
										r.operationID = "app-role-write-secret-id"
										r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '-': // Prefix: "-"
									origElem := elem
									if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "accessor/"
										origElem := elem
										if l := len("accessor/"); len(elem) >= l && elem[0:l] == "accessor/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'd': // Prefix: "destroy"
											origElem := elem
											if l := len("destroy"); len(elem) >= l && elem[0:l] == "destroy" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "DELETE":
													r.name = "AppRoleDestroySecretIDByAccessor2"
													r.summary = ""
													r.operationID = "app-role-destroy-secret-id-by-accessor2"
													r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/destroy"
													r.args = args
													r.count = 2
													return r, true
												case "POST":
													r.name = "AppRoleDestroySecretIDByAccessor"
													r.summary = ""
													r.operationID = "app-role-destroy-secret-id-by-accessor"
													r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/destroy"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}

											elem = origElem
										case 'l': // Prefix: "lookup"
											origElem := elem
											if l := len("lookup"); len(elem) >= l && elem[0:l] == "lookup" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = "AppRoleLookUpSecretIDByAccessor"
													r.summary = ""
													r.operationID = "app-role-look-up-secret-id-by-accessor"
													r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/lookup"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}

											elem = origElem
										}

										elem = origElem
									case 'b': // Prefix: "bound-cidrs"
										origElem := elem
										if l := len("bound-cidrs"); len(elem) >= l && elem[0:l] == "bound-cidrs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "DELETE":
												r.name = "AppRoleDeleteSecretIDBoundCidrs"
												r.summary = ""
												r.operationID = "app-role-delete-secret-id-bound-cidrs"
												r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs"
												r.args = args
												r.count = 2
												return r, true
											case "GET":
												r.name = "AppRoleReadSecretIDBoundCidrs"
												r.summary = ""
												r.operationID = "app-role-read-secret-id-bound-cidrs"
												r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs"
												r.args = args
												r.count = 2
												return r, true
											case "POST":
												r.name = "AppRoleWriteSecretIDBoundCidrs"
												r.summary = ""
												r.operationID = "app-role-write-secret-id-bound-cidrs"
												r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 'n': // Prefix: "num-uses"
										origElem := elem
										if l := len("num-uses"); len(elem) >= l && elem[0:l] == "num-uses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "DELETE":
												r.name = "AppRoleDeleteSecretIDNumUses"
												r.summary = ""
												r.operationID = "app-role-delete-secret-id-num-uses"
												r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses"
												r.args = args
												r.count = 2
												return r, true
											case "GET":
												r.name = "AppRoleReadSecretIDNumUses"
												r.summary = ""
												r.operationID = "app-role-read-secret-id-num-uses"
												r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses"
												r.args = args
												r.count = 2
												return r, true
											case "POST":
												r.name = "AppRoleWriteSecretIDNumUses"
												r.summary = ""
												r.operationID = "app-role-write-secret-id-num-uses"
												r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 't': // Prefix: "ttl"
										origElem := elem
										if l := len("ttl"); len(elem) >= l && elem[0:l] == "ttl" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "DELETE":
												r.name = "AppRoleDeleteSecretIDTTL"
												r.summary = ""
												r.operationID = "app-role-delete-secret-id-ttl"
												r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id-ttl"
												r.args = args
												r.count = 2
												return r, true
											case "GET":
												r.name = "AppRoleReadSecretIDTTL"
												r.summary = ""
												r.operationID = "app-role-read-secret-id-ttl"
												r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id-ttl"
												r.args = args
												r.count = 2
												return r, true
											case "POST":
												r.name = "AppRoleWriteSecretIDTTL"
												r.summary = ""
												r.operationID = "app-role-write-secret-id-ttl"
												r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id-ttl"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "AppRoleListSecretIds"
											r.summary = ""
											r.operationID = "app-role-list-secret-ids"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id/"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'd': // Prefix: "destroy"
										origElem := elem
										if l := len("destroy"); len(elem) >= l && elem[0:l] == "destroy" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "DELETE":
												r.name = "AppRoleDestroySecretId2"
												r.summary = ""
												r.operationID = "app-role-destroy-secret-id2"
												r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id/destroy"
												r.args = args
												r.count = 2
												return r, true
											case "POST":
												r.name = "AppRoleDestroySecretID"
												r.summary = ""
												r.operationID = "app-role-destroy-secret-id"
												r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id/destroy"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 'l': // Prefix: "lookup"
										origElem := elem
										if l := len("lookup"); len(elem) >= l && elem[0:l] == "lookup" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = "AppRoleLookUpSecretID"
												r.summary = ""
												r.operationID = "app-role-look-up-secret-id"
												r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/secret-id/lookup"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 't': // Prefix: "token-"
								origElem := elem
								if l := len("token-"); len(elem) >= l && elem[0:l] == "token-" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'b': // Prefix: "bound-cidrs"
									origElem := elem
									if l := len("bound-cidrs"); len(elem) >= l && elem[0:l] == "bound-cidrs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "AppRoleDeleteTokenBoundCidrs"
											r.summary = ""
											r.operationID = "app-role-delete-token-bound-cidrs"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = "AppRoleReadTokenBoundCidrs"
											r.summary = ""
											r.operationID = "app-role-read-token-bound-cidrs"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs"
											r.args = args
											r.count = 2
											return r, true
										case "POST":
											r.name = "AppRoleWriteTokenBoundCidrs"
											r.summary = ""
											r.operationID = "app-role-write-token-bound-cidrs"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'm': // Prefix: "max-ttl"
									origElem := elem
									if l := len("max-ttl"); len(elem) >= l && elem[0:l] == "max-ttl" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "AppRoleDeleteTokenMaxTTL"
											r.summary = ""
											r.operationID = "app-role-delete-token-max-ttl"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/token-max-ttl"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = "AppRoleReadTokenMaxTTL"
											r.summary = ""
											r.operationID = "app-role-read-token-max-ttl"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/token-max-ttl"
											r.args = args
											r.count = 2
											return r, true
										case "POST":
											r.name = "AppRoleWriteTokenMaxTTL"
											r.summary = ""
											r.operationID = "app-role-write-token-max-ttl"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/token-max-ttl"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'n': // Prefix: "num-uses"
									origElem := elem
									if l := len("num-uses"); len(elem) >= l && elem[0:l] == "num-uses" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "AppRoleDeleteTokenNumUses"
											r.summary = ""
											r.operationID = "app-role-delete-token-num-uses"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/token-num-uses"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = "AppRoleReadTokenNumUses"
											r.summary = ""
											r.operationID = "app-role-read-token-num-uses"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/token-num-uses"
											r.args = args
											r.count = 2
											return r, true
										case "POST":
											r.name = "AppRoleWriteTokenNumUses"
											r.summary = ""
											r.operationID = "app-role-write-token-num-uses"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/token-num-uses"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 't': // Prefix: "ttl"
									origElem := elem
									if l := len("ttl"); len(elem) >= l && elem[0:l] == "ttl" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "AppRoleDeleteTokenTTL"
											r.summary = ""
											r.operationID = "app-role-delete-token-ttl"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/token-ttl"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = "AppRoleReadTokenTTL"
											r.summary = ""
											r.operationID = "app-role-read-token-ttl"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/token-ttl"
											r.args = args
											r.count = 2
											return r, true
										case "POST":
											r.name = "AppRoleWriteTokenTTL"
											r.summary = ""
											r.operationID = "app-role-write-token-ttl"
											r.pathPattern = "/auth/{approle_mount_path}/role/{role_name}/token-ttl"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 't': // Prefix: "tidy/secret-id"
						origElem := elem
						if l := len("tidy/secret-id"); len(elem) >= l && elem[0:l] == "tidy/secret-id" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "AppRoleTidySecretID"
								r.summary = ""
								r.operationID = "app-role-tidy-secret-id"
								r.pathPattern = "/auth/{approle_mount_path}/tidy/secret-id"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}
			// Param: "kv_v2_mount_path"
			// Match until "/"
			idx := strings.IndexByte(elem, '/')
			if idx < 0 {
				idx = len(elem)
			}
			args[0] = elem[:idx]
			elem = elem[idx:]

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '/': // Prefix: "/"
				origElem := elem
				if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "config"
					origElem := elem
					if l := len("config"); len(elem) >= l && elem[0:l] == "config" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "KvV2ReadConfiguration"
							r.summary = "Read the backend level settings."
							r.operationID = "kv-v2-read-configuration"
							r.pathPattern = "/{kv_v2_mount_path}/config"
							r.args = args
							r.count = 1
							return r, true
						case "POST":
							r.name = "KvV2Configure"
							r.summary = "Configure backend level settings that are applied to every key in the key-value store."
							r.operationID = "kv-v2-configure"
							r.pathPattern = "/{kv_v2_mount_path}/config"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'd': // Prefix: "d"
					origElem := elem
					if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "ata/"
						origElem := elem
						if l := len("ata/"); len(elem) >= l && elem[0:l] == "ata/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "path"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "KvV2Delete"
								r.summary = ""
								r.operationID = "kv-v2-delete"
								r.pathPattern = "/{kv_v2_mount_path}/data/{path}"
								r.args = args
								r.count = 2
								return r, true
							case "GET":
								r.name = "KvV2Read"
								r.summary = ""
								r.operationID = "kv-v2-read"
								r.pathPattern = "/{kv_v2_mount_path}/data/{path}"
								r.args = args
								r.count = 2
								return r, true
							case "POST":
								r.name = "KvV2Write"
								r.summary = ""
								r.operationID = "kv-v2-write"
								r.pathPattern = "/{kv_v2_mount_path}/data/{path}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'e': // Prefix: "e"
						origElem := elem
						if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "lete/"
							origElem := elem
							if l := len("lete/"); len(elem) >= l && elem[0:l] == "lete/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "path"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "KvV2DeleteVersions"
									r.summary = ""
									r.operationID = "kv-v2-delete-versions"
									r.pathPattern = "/{kv_v2_mount_path}/delete/{path}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 's': // Prefix: "stroy/"
							origElem := elem
							if l := len("stroy/"); len(elem) >= l && elem[0:l] == "stroy/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "path"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "KvV2DestroyVersions"
									r.summary = ""
									r.operationID = "kv-v2-destroy-versions"
									r.pathPattern = "/{kv_v2_mount_path}/destroy/{path}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'm': // Prefix: "metadata/"
					origElem := elem
					if l := len("metadata/"); len(elem) >= l && elem[0:l] == "metadata/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "path"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[1] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "KvV2DeleteMetadataAndAllVersions"
							r.summary = ""
							r.operationID = "kv-v2-delete-metadata-and-all-versions"
							r.pathPattern = "/{kv_v2_mount_path}/metadata/{path}"
							r.args = args
							r.count = 2
							return r, true
						case "GET":
							r.name = "KvV2ReadMetadata"
							r.summary = ""
							r.operationID = "kv-v2-read-metadata"
							r.pathPattern = "/{kv_v2_mount_path}/metadata/{path}"
							r.args = args
							r.count = 2
							return r, true
						case "POST":
							r.name = "KvV2WriteMetadata"
							r.summary = ""
							r.operationID = "kv-v2-write-metadata"
							r.pathPattern = "/{kv_v2_mount_path}/metadata/{path}"
							r.args = args
							r.count = 2
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "KvV2List"
								r.summary = ""
								r.operationID = "kv-v2-list"
								r.pathPattern = "/{kv_v2_mount_path}/metadata/{path}/"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "subkeys/"
					origElem := elem
					if l := len("subkeys/"); len(elem) >= l && elem[0:l] == "subkeys/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "path"
					// Leaf parameter
					args[1] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "KvV2ReadSubkeys"
							r.summary = ""
							r.operationID = "kv-v2-read-subkeys"
							r.pathPattern = "/{kv_v2_mount_path}/subkeys/{path}"
							r.args = args
							r.count = 2
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'u': // Prefix: "undelete/"
					origElem := elem
					if l := len("undelete/"); len(elem) >= l && elem[0:l] == "undelete/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "path"
					// Leaf parameter
					args[1] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "KvV2UndeleteVersions"
							r.summary = ""
							r.operationID = "kv-v2-undelete-versions"
							r.pathPattern = "/{kv_v2_mount_path}/undelete/{path}"
							r.args = args
							r.count = 2
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
