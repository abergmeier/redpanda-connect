// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AppRoleDeleteBindSecretIDParams is parameters of app-role-delete-bind-secret-id operation.
type AppRoleDeleteBindSecretIDParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDeleteBindSecretIDParams(packed middleware.Parameters) (params AppRoleDeleteBindSecretIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDeleteBindSecretIDParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDeleteBindSecretIDParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDeleteBoundCidrListParams is parameters of app-role-delete-bound-cidr-list operation.
type AppRoleDeleteBoundCidrListParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDeleteBoundCidrListParams(packed middleware.Parameters) (params AppRoleDeleteBoundCidrListParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDeleteBoundCidrListParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDeleteBoundCidrListParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDeletePeriodParams is parameters of app-role-delete-period operation.
type AppRoleDeletePeriodParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDeletePeriodParams(packed middleware.Parameters) (params AppRoleDeletePeriodParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDeletePeriodParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDeletePeriodParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDeletePoliciesParams is parameters of app-role-delete-policies operation.
type AppRoleDeletePoliciesParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDeletePoliciesParams(packed middleware.Parameters) (params AppRoleDeletePoliciesParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDeletePoliciesParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDeletePoliciesParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDeleteRoleParams is parameters of app-role-delete-role operation.
type AppRoleDeleteRoleParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDeleteRoleParams(packed middleware.Parameters) (params AppRoleDeleteRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDeleteRoleParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDeleteRoleParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDeleteSecretIDBoundCidrsParams is parameters of app-role-delete-secret-id-bound-cidrs operation.
type AppRoleDeleteSecretIDBoundCidrsParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDeleteSecretIDBoundCidrsParams(packed middleware.Parameters) (params AppRoleDeleteSecretIDBoundCidrsParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDeleteSecretIDBoundCidrsParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDeleteSecretIDBoundCidrsParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDeleteSecretIDNumUsesParams is parameters of app-role-delete-secret-id-num-uses operation.
type AppRoleDeleteSecretIDNumUsesParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDeleteSecretIDNumUsesParams(packed middleware.Parameters) (params AppRoleDeleteSecretIDNumUsesParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDeleteSecretIDNumUsesParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDeleteSecretIDNumUsesParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDeleteSecretIDTTLParams is parameters of app-role-delete-secret-id-ttl operation.
type AppRoleDeleteSecretIDTTLParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDeleteSecretIDTTLParams(packed middleware.Parameters) (params AppRoleDeleteSecretIDTTLParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDeleteSecretIDTTLParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDeleteSecretIDTTLParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDeleteTokenBoundCidrsParams is parameters of app-role-delete-token-bound-cidrs operation.
type AppRoleDeleteTokenBoundCidrsParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDeleteTokenBoundCidrsParams(packed middleware.Parameters) (params AppRoleDeleteTokenBoundCidrsParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDeleteTokenBoundCidrsParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDeleteTokenBoundCidrsParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDeleteTokenMaxTTLParams is parameters of app-role-delete-token-max-ttl operation.
type AppRoleDeleteTokenMaxTTLParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDeleteTokenMaxTTLParams(packed middleware.Parameters) (params AppRoleDeleteTokenMaxTTLParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDeleteTokenMaxTTLParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDeleteTokenMaxTTLParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDeleteTokenNumUsesParams is parameters of app-role-delete-token-num-uses operation.
type AppRoleDeleteTokenNumUsesParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDeleteTokenNumUsesParams(packed middleware.Parameters) (params AppRoleDeleteTokenNumUsesParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDeleteTokenNumUsesParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDeleteTokenNumUsesParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDeleteTokenTTLParams is parameters of app-role-delete-token-ttl operation.
type AppRoleDeleteTokenTTLParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDeleteTokenTTLParams(packed middleware.Parameters) (params AppRoleDeleteTokenTTLParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDeleteTokenTTLParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDeleteTokenTTLParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDestroySecretIDParams is parameters of app-role-destroy-secret-id operation.
type AppRoleDestroySecretIDParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDestroySecretIDParams(packed middleware.Parameters) (params AppRoleDestroySecretIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDestroySecretIDParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDestroySecretIDParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDestroySecretIDByAccessorParams is parameters of app-role-destroy-secret-id-by-accessor operation.
type AppRoleDestroySecretIDByAccessorParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDestroySecretIDByAccessorParams(packed middleware.Parameters) (params AppRoleDestroySecretIDByAccessorParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDestroySecretIDByAccessorParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDestroySecretIDByAccessorParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDestroySecretIDByAccessor2Params is parameters of app-role-destroy-secret-id-by-accessor2 operation.
type AppRoleDestroySecretIDByAccessor2Params struct {
	// Accessor of the SecretID.
	SecretIDAccessor OptString
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDestroySecretIDByAccessor2Params(packed middleware.Parameters) (params AppRoleDestroySecretIDByAccessor2Params) {
	{
		key := middleware.ParameterKey{
			Name: "secret_id_accessor",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SecretIDAccessor = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDestroySecretIDByAccessor2Params(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDestroySecretIDByAccessor2Params, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: secret_id_accessor.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "secret_id_accessor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSecretIDAccessorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSecretIDAccessorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SecretIDAccessor.SetTo(paramsDotSecretIDAccessorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "secret_id_accessor",
			In:   "query",
			Err:  err,
		}
	}
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleDestroySecretId2Params is parameters of app-role-destroy-secret-id2 operation.
type AppRoleDestroySecretId2Params struct {
	// SecretID attached to the role.
	SecretID OptString
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleDestroySecretId2Params(packed middleware.Parameters) (params AppRoleDestroySecretId2Params) {
	{
		key := middleware.ParameterKey{
			Name: "secret_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SecretID = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleDestroySecretId2Params(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleDestroySecretId2Params, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: secret_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "secret_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSecretIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSecretIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SecretID.SetTo(paramsDotSecretIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "secret_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleListRolesParams is parameters of app-role-list-roles operation.
type AppRoleListRolesParams struct {
	// Must be set to `true`.
	List AppRoleListRolesList
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleListRolesParams(packed middleware.Parameters) (params AppRoleListRolesParams) {
	{
		key := middleware.ParameterKey{
			Name: "list",
			In:   "query",
		}
		params.List = packed[key].(AppRoleListRolesList)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleListRolesParams(args [1]string, argsEscaped bool, r *http.Request) (params AppRoleListRolesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: list.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "list",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.List = AppRoleListRolesList(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.List.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "list",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleListSecretIdsParams is parameters of app-role-list-secret-ids operation.
type AppRoleListSecretIdsParams struct {
	// Must be set to `true`.
	List AppRoleListSecretIdsList
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleListSecretIdsParams(packed middleware.Parameters) (params AppRoleListSecretIdsParams) {
	{
		key := middleware.ParameterKey{
			Name: "list",
			In:   "query",
		}
		params.List = packed[key].(AppRoleListSecretIdsList)
	}
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleListSecretIdsParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleListSecretIdsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: list.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "list",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.List = AppRoleListSecretIdsList(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.List.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "list",
			In:   "query",
			Err:  err,
		}
	}
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleLoginParams is parameters of app-role-login operation.
type AppRoleLoginParams struct {
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleLoginParams(packed middleware.Parameters) (params AppRoleLoginParams) {
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleLoginParams(args [1]string, argsEscaped bool, r *http.Request) (params AppRoleLoginParams, _ error) {
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleLookUpSecretIDParams is parameters of app-role-look-up-secret-id operation.
type AppRoleLookUpSecretIDParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleLookUpSecretIDParams(packed middleware.Parameters) (params AppRoleLookUpSecretIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleLookUpSecretIDParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleLookUpSecretIDParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleLookUpSecretIDByAccessorParams is parameters of app-role-look-up-secret-id-by-accessor operation.
type AppRoleLookUpSecretIDByAccessorParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleLookUpSecretIDByAccessorParams(packed middleware.Parameters) (params AppRoleLookUpSecretIDByAccessorParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleLookUpSecretIDByAccessorParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleLookUpSecretIDByAccessorParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadBindSecretIDParams is parameters of app-role-read-bind-secret-id operation.
type AppRoleReadBindSecretIDParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadBindSecretIDParams(packed middleware.Parameters) (params AppRoleReadBindSecretIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadBindSecretIDParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadBindSecretIDParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadBoundCidrListParams is parameters of app-role-read-bound-cidr-list operation.
type AppRoleReadBoundCidrListParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadBoundCidrListParams(packed middleware.Parameters) (params AppRoleReadBoundCidrListParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadBoundCidrListParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadBoundCidrListParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadLocalSecretIdsParams is parameters of app-role-read-local-secret-ids operation.
type AppRoleReadLocalSecretIdsParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadLocalSecretIdsParams(packed middleware.Parameters) (params AppRoleReadLocalSecretIdsParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadLocalSecretIdsParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadLocalSecretIdsParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadPeriodParams is parameters of app-role-read-period operation.
type AppRoleReadPeriodParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadPeriodParams(packed middleware.Parameters) (params AppRoleReadPeriodParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadPeriodParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadPeriodParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadPoliciesParams is parameters of app-role-read-policies operation.
type AppRoleReadPoliciesParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadPoliciesParams(packed middleware.Parameters) (params AppRoleReadPoliciesParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadPoliciesParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadPoliciesParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadRoleParams is parameters of app-role-read-role operation.
type AppRoleReadRoleParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadRoleParams(packed middleware.Parameters) (params AppRoleReadRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadRoleParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadRoleParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadRoleIDParams is parameters of app-role-read-role-id operation.
type AppRoleReadRoleIDParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadRoleIDParams(packed middleware.Parameters) (params AppRoleReadRoleIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadRoleIDParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadRoleIDParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadSecretIDBoundCidrsParams is parameters of app-role-read-secret-id-bound-cidrs operation.
type AppRoleReadSecretIDBoundCidrsParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadSecretIDBoundCidrsParams(packed middleware.Parameters) (params AppRoleReadSecretIDBoundCidrsParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadSecretIDBoundCidrsParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadSecretIDBoundCidrsParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadSecretIDNumUsesParams is parameters of app-role-read-secret-id-num-uses operation.
type AppRoleReadSecretIDNumUsesParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadSecretIDNumUsesParams(packed middleware.Parameters) (params AppRoleReadSecretIDNumUsesParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadSecretIDNumUsesParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadSecretIDNumUsesParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadSecretIDTTLParams is parameters of app-role-read-secret-id-ttl operation.
type AppRoleReadSecretIDTTLParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadSecretIDTTLParams(packed middleware.Parameters) (params AppRoleReadSecretIDTTLParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadSecretIDTTLParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadSecretIDTTLParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadTokenBoundCidrsParams is parameters of app-role-read-token-bound-cidrs operation.
type AppRoleReadTokenBoundCidrsParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadTokenBoundCidrsParams(packed middleware.Parameters) (params AppRoleReadTokenBoundCidrsParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadTokenBoundCidrsParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadTokenBoundCidrsParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadTokenMaxTTLParams is parameters of app-role-read-token-max-ttl operation.
type AppRoleReadTokenMaxTTLParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadTokenMaxTTLParams(packed middleware.Parameters) (params AppRoleReadTokenMaxTTLParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadTokenMaxTTLParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadTokenMaxTTLParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadTokenNumUsesParams is parameters of app-role-read-token-num-uses operation.
type AppRoleReadTokenNumUsesParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadTokenNumUsesParams(packed middleware.Parameters) (params AppRoleReadTokenNumUsesParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadTokenNumUsesParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadTokenNumUsesParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleReadTokenTTLParams is parameters of app-role-read-token-ttl operation.
type AppRoleReadTokenTTLParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleReadTokenTTLParams(packed middleware.Parameters) (params AppRoleReadTokenTTLParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleReadTokenTTLParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleReadTokenTTLParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleTidySecretIDParams is parameters of app-role-tidy-secret-id operation.
type AppRoleTidySecretIDParams struct {
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleTidySecretIDParams(packed middleware.Parameters) (params AppRoleTidySecretIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleTidySecretIDParams(args [1]string, argsEscaped bool, r *http.Request) (params AppRoleTidySecretIDParams, _ error) {
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteBindSecretIDParams is parameters of app-role-write-bind-secret-id operation.
type AppRoleWriteBindSecretIDParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteBindSecretIDParams(packed middleware.Parameters) (params AppRoleWriteBindSecretIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteBindSecretIDParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteBindSecretIDParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteBoundCidrListParams is parameters of app-role-write-bound-cidr-list operation.
type AppRoleWriteBoundCidrListParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteBoundCidrListParams(packed middleware.Parameters) (params AppRoleWriteBoundCidrListParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteBoundCidrListParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteBoundCidrListParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteCustomSecretIDParams is parameters of app-role-write-custom-secret-id operation.
type AppRoleWriteCustomSecretIDParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteCustomSecretIDParams(packed middleware.Parameters) (params AppRoleWriteCustomSecretIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteCustomSecretIDParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteCustomSecretIDParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWritePeriodParams is parameters of app-role-write-period operation.
type AppRoleWritePeriodParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWritePeriodParams(packed middleware.Parameters) (params AppRoleWritePeriodParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWritePeriodParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWritePeriodParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWritePoliciesParams is parameters of app-role-write-policies operation.
type AppRoleWritePoliciesParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWritePoliciesParams(packed middleware.Parameters) (params AppRoleWritePoliciesParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWritePoliciesParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWritePoliciesParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteRoleParams is parameters of app-role-write-role operation.
type AppRoleWriteRoleParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteRoleParams(packed middleware.Parameters) (params AppRoleWriteRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteRoleParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteRoleParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteRoleIDParams is parameters of app-role-write-role-id operation.
type AppRoleWriteRoleIDParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteRoleIDParams(packed middleware.Parameters) (params AppRoleWriteRoleIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteRoleIDParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteRoleIDParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteSecretIDParams is parameters of app-role-write-secret-id operation.
type AppRoleWriteSecretIDParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteSecretIDParams(packed middleware.Parameters) (params AppRoleWriteSecretIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteSecretIDParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteSecretIDParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteSecretIDBoundCidrsParams is parameters of app-role-write-secret-id-bound-cidrs operation.
type AppRoleWriteSecretIDBoundCidrsParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteSecretIDBoundCidrsParams(packed middleware.Parameters) (params AppRoleWriteSecretIDBoundCidrsParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteSecretIDBoundCidrsParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteSecretIDBoundCidrsParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteSecretIDNumUsesParams is parameters of app-role-write-secret-id-num-uses operation.
type AppRoleWriteSecretIDNumUsesParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteSecretIDNumUsesParams(packed middleware.Parameters) (params AppRoleWriteSecretIDNumUsesParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteSecretIDNumUsesParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteSecretIDNumUsesParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteSecretIDTTLParams is parameters of app-role-write-secret-id-ttl operation.
type AppRoleWriteSecretIDTTLParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteSecretIDTTLParams(packed middleware.Parameters) (params AppRoleWriteSecretIDTTLParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteSecretIDTTLParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteSecretIDTTLParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteTokenBoundCidrsParams is parameters of app-role-write-token-bound-cidrs operation.
type AppRoleWriteTokenBoundCidrsParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteTokenBoundCidrsParams(packed middleware.Parameters) (params AppRoleWriteTokenBoundCidrsParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteTokenBoundCidrsParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteTokenBoundCidrsParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteTokenMaxTTLParams is parameters of app-role-write-token-max-ttl operation.
type AppRoleWriteTokenMaxTTLParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteTokenMaxTTLParams(packed middleware.Parameters) (params AppRoleWriteTokenMaxTTLParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteTokenMaxTTLParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteTokenMaxTTLParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteTokenNumUsesParams is parameters of app-role-write-token-num-uses operation.
type AppRoleWriteTokenNumUsesParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteTokenNumUsesParams(packed middleware.Parameters) (params AppRoleWriteTokenNumUsesParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteTokenNumUsesParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteTokenNumUsesParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppRoleWriteTokenTTLParams is parameters of app-role-write-token-ttl operation.
type AppRoleWriteTokenTTLParams struct {
	// Name of the role. Must be less than 4096 bytes.
	RoleName string
	// Path that the backend was mounted at.
	ApproleMountPath string
}

func unpackAppRoleWriteTokenTTLParams(packed middleware.Parameters) (params AppRoleWriteTokenTTLParams) {
	{
		key := middleware.ParameterKey{
			Name: "role_name",
			In:   "path",
		}
		params.RoleName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "approle_mount_path",
			In:   "path",
		}
		params.ApproleMountPath = packed[key].(string)
	}
	return params
}

func decodeAppRoleWriteTokenTTLParams(args [2]string, argsEscaped bool, r *http.Request) (params AppRoleWriteTokenTTLParams, _ error) {
	// Decode path: role_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_name",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: approle_mount_path.
	{
		val := string("approle")
		params.ApproleMountPath = val
	}
	// Decode path: approle_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "approle_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApproleMountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "approle_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2ConfigureParams is parameters of kv-v2-configure operation.
type KvV2ConfigureParams struct {
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2ConfigureParams(packed middleware.Parameters) (params KvV2ConfigureParams) {
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2ConfigureParams(args [1]string, argsEscaped bool, r *http.Request) (params KvV2ConfigureParams, _ error) {
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2DeleteParams is parameters of kv-v2-delete operation.
type KvV2DeleteParams struct {
	// Location of the secret.
	Path string
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2DeleteParams(packed middleware.Parameters) (params KvV2DeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.Path = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2DeleteParams(args [2]string, argsEscaped bool, r *http.Request) (params KvV2DeleteParams, _ error) {
	// Decode path: path.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2DeleteMetadataAndAllVersionsParams is parameters of kv-v2-delete-metadata-and-all-versions operation.
type KvV2DeleteMetadataAndAllVersionsParams struct {
	// Location of the secret.
	Path string
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2DeleteMetadataAndAllVersionsParams(packed middleware.Parameters) (params KvV2DeleteMetadataAndAllVersionsParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.Path = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2DeleteMetadataAndAllVersionsParams(args [2]string, argsEscaped bool, r *http.Request) (params KvV2DeleteMetadataAndAllVersionsParams, _ error) {
	// Decode path: path.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2DeleteVersionsParams is parameters of kv-v2-delete-versions operation.
type KvV2DeleteVersionsParams struct {
	// Location of the secret.
	Path string
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2DeleteVersionsParams(packed middleware.Parameters) (params KvV2DeleteVersionsParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.Path = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2DeleteVersionsParams(args [2]string, argsEscaped bool, r *http.Request) (params KvV2DeleteVersionsParams, _ error) {
	// Decode path: path.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2DestroyVersionsParams is parameters of kv-v2-destroy-versions operation.
type KvV2DestroyVersionsParams struct {
	// Location of the secret.
	Path string
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2DestroyVersionsParams(packed middleware.Parameters) (params KvV2DestroyVersionsParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.Path = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2DestroyVersionsParams(args [2]string, argsEscaped bool, r *http.Request) (params KvV2DestroyVersionsParams, _ error) {
	// Decode path: path.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2ListParams is parameters of kv-v2-list operation.
type KvV2ListParams struct {
	// Must be set to `true`.
	List KvV2ListList
	// Location of the secret.
	Path string
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2ListParams(packed middleware.Parameters) (params KvV2ListParams) {
	{
		key := middleware.ParameterKey{
			Name: "list",
			In:   "query",
		}
		params.List = packed[key].(KvV2ListList)
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.Path = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2ListParams(args [2]string, argsEscaped bool, r *http.Request) (params KvV2ListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: list.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "list",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.List = KvV2ListList(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.List.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "list",
			In:   "query",
			Err:  err,
		}
	}
	// Decode path: path.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2ReadParams is parameters of kv-v2-read operation.
type KvV2ReadParams struct {
	// Location of the secret.
	Path string
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2ReadParams(packed middleware.Parameters) (params KvV2ReadParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.Path = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2ReadParams(args [2]string, argsEscaped bool, r *http.Request) (params KvV2ReadParams, _ error) {
	// Decode path: path.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2ReadConfigurationParams is parameters of kv-v2-read-configuration operation.
type KvV2ReadConfigurationParams struct {
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2ReadConfigurationParams(packed middleware.Parameters) (params KvV2ReadConfigurationParams) {
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2ReadConfigurationParams(args [1]string, argsEscaped bool, r *http.Request) (params KvV2ReadConfigurationParams, _ error) {
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2ReadMetadataParams is parameters of kv-v2-read-metadata operation.
type KvV2ReadMetadataParams struct {
	// Location of the secret.
	Path string
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2ReadMetadataParams(packed middleware.Parameters) (params KvV2ReadMetadataParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.Path = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2ReadMetadataParams(args [2]string, argsEscaped bool, r *http.Request) (params KvV2ReadMetadataParams, _ error) {
	// Decode path: path.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2ReadSubkeysParams is parameters of kv-v2-read-subkeys operation.
type KvV2ReadSubkeysParams struct {
	// Location of the secret.
	Path string
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2ReadSubkeysParams(packed middleware.Parameters) (params KvV2ReadSubkeysParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.Path = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2ReadSubkeysParams(args [2]string, argsEscaped bool, r *http.Request) (params KvV2ReadSubkeysParams, _ error) {
	// Decode path: path.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2UndeleteVersionsParams is parameters of kv-v2-undelete-versions operation.
type KvV2UndeleteVersionsParams struct {
	// Location of the secret.
	Path string
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2UndeleteVersionsParams(packed middleware.Parameters) (params KvV2UndeleteVersionsParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.Path = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2UndeleteVersionsParams(args [2]string, argsEscaped bool, r *http.Request) (params KvV2UndeleteVersionsParams, _ error) {
	// Decode path: path.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2WriteParams is parameters of kv-v2-write operation.
type KvV2WriteParams struct {
	// Location of the secret.
	Path string
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2WriteParams(packed middleware.Parameters) (params KvV2WriteParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.Path = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2WriteParams(args [2]string, argsEscaped bool, r *http.Request) (params KvV2WriteParams, _ error) {
	// Decode path: path.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// KvV2WriteMetadataParams is parameters of kv-v2-write-metadata operation.
type KvV2WriteMetadataParams struct {
	// Location of the secret.
	Path string
	// Path that the backend was mounted at.
	KvV2MountPath string
}

func unpackKvV2WriteMetadataParams(packed middleware.Parameters) (params KvV2WriteMetadataParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.Path = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "kv_v2_mount_path",
			In:   "path",
		}
		params.KvV2MountPath = packed[key].(string)
	}
	return params
}

func decodeKvV2WriteMetadataParams(args [2]string, argsEscaped bool, r *http.Request) (params KvV2WriteMetadataParams, _ error) {
	// Decode path: path.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for path: kv_v2_mount_path.
	{
		val := string("kv-v2")
		params.KvV2MountPath = val
	}
	// Decode path: kv_v2_mount_path.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "kv_v2_mount_path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.KvV2MountPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "kv_v2_mount_path",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
